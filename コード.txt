// フォルダID設定
const TEMP_FOLDER_ID = '1t1gDaF6QLJsWmFJU-qsB25slrcnDnYaY';  // 一時保存用
const PDF_FOLDER_ID = '1cGQrq_H5QNcvNqIZEw5u4axQFI4qlEYV';   // PDF保存用

function doGet() {
  return HtmlService.createHtmlOutputFromFile('index')
    .setTitle('歯科治療計画書システム')
    .addMetaTag('viewport', 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// 一時保存データをGoogle Driveに保存
function saveToTempFolder(data) {
  try {
    const folder = DriveApp.getFolderById(TEMP_FOLDER_ID);
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
    const fileName = `temp_${data.patientId}_${data.patientName}_${timestamp}.json`;
    
    // 既存の同じ患者のファイルを検索
    const files = folder.getFilesByName(fileName);
    
    // JSONデータを作成
    const jsonData = JSON.stringify(data, null, 2);
    const blob = Utilities.newBlob(jsonData, 'application/json', fileName);
    
    // ファイルを作成または更新
    if (files.hasNext()) {
      // 既存ファイルを更新
      const file = files.next();
      Drive.Files.update({}, file.getId(), blob);
    } else {
      // 新規ファイルを作成
      folder.createFile(blob);
    }
    
    return {
      success: true,
      message: '一時保存しました',
      fileName: fileName
    };
  } catch (error) {
    console.error('保存エラー:', error);
    return {
      success: false,
      error: error.toString()
    };
  }
}

// 一時保存フォルダからファイル一覧を取得
function getTempFileList() {
  try {
    const folder = DriveApp.getFolderById(TEMP_FOLDER_ID);
    const files = folder.getFiles();
    const fileList = [];
    
    while (files.hasNext()) {
      const file = files.next();
      const fileName = file.getName();
      
      // JSONファイルのみを対象
      if (fileName.endsWith('.json')) {
        // ファイル名から情報を抽出
        const parts = fileName.replace('.json', '').split('_');
        if (parts.length >= 4) {
          fileList.push({
            id: file.getId(),
            fileName: fileName,
            patientId: parts[1],
            patientName: parts[2],
            timestamp: parts.slice(3).join('_'),
            lastModified: file.getLastUpdated().toISOString()
          });
        }
      }
    }
    
    // 最終更新日時でソート（新しい順）
    fileList.sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified));
    
    return fileList;
  } catch (error) {
    console.error('ファイルリスト取得エラー:', error);
    return [];
  }
}

// 一時保存ファイルを読み込み
function loadTempFile(fileId) {
  try {
    const file = DriveApp.getFileById(fileId);
    const content = file.getBlob().getDataAsString();
    const data = JSON.parse(content);
    
    return {
      success: true,
      data: data
    };
  } catch (error) {
    console.error('ファイル読み込みエラー:', error);
    return {
      success: false,
      error: error.toString()
    };
  }
}

// 一時保存ファイルを削除
function deleteTempFile(fileId) {
  try {
    const file = DriveApp.getFileById(fileId);
    file.setTrashed(true);
    
    return {
      success: true,
      message: 'ファイルを削除しました'
    };
  } catch (error) {
    console.error('ファイル削除エラー:', error);
    return {
      success: false,
      error: error.toString()
    };
  }
}

// PDFを生成してGoogle Driveに保存
function generatePDF(data) {
  try {
    const folder = DriveApp.getFolderById(PDF_FOLDER_ID);
    const timestamp = new Date().toLocaleDateString('ja-JP').replace(/\//g, '');
    const fileName = `治療計画書_${data.patientInfo.name}_${data.patientInfo.id}_${timestamp}.pdf`;
    
    // HTML生成
    let html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            @page { margin: 15mm; }
            body {
                font-family: 'Noto Sans JP', sans-serif;
                margin: 0;
                padding: 0;
                font-size: 11px;
                line-height: 1.4;
            }
            h1 {
                text-align: center;
                font-size: 16px;
                margin: 0 0 10px 0;
            }
            h2 {
                font-size: 14px;
                margin: 10px 0 5px 0;
                padding: 5px;
                background-color: #f0f0f0;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 10px;
            }
            th, td {
                border: 1px solid #000;
                padding: 4px;
                text-align: left;
                vertical-align: top;
            }
            th {
                background-color: #f0f0f0;
                font-weight: normal;
            }
            .header-row td {
                text-align: center;
                padding: 6px;
            }
            .patient-info td {
                padding: 8px;
            }
            .treatment-cell {
                width: 80px;
                text-align: center;
                font-weight: bold;
                white-space: nowrap;
            }
            .treatment-cell.long-text {
                font-size: 9px;
            }
            .tooth-cell {
                width: 100px;
                text-align: center;
            }
            .remarks-cell {
                width: auto;
                font-size: 10px;
                line-height: 1.3;
            }
            .cross-display {
                display: inline-block;
                border: 1px solid #333;
                width: 60px;
                height: 40px;
                position: relative;
                margin: 2px auto;
            }
            .cross-line-horizontal {
                position: absolute;
                width: 100%;
                height: 1px;
                background-color: #333;
                top: 50%;
                left: 0;
                transform: translateY(-50%);
            }
            .cross-line-vertical {
                position: absolute;
                width: 1px;
                height: 100%;
                background-color: #333;
                left: 50%;
                top: 0;
                transform: translateX(-50%);
            }
            .quadrant {
                position: absolute;
                width: 50%;
                height: 50%;
                font-size: 9px;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .quadrant.tl { top: 0; left: 0; }
            .quadrant.tr { top: 0; right: 0; }
            .quadrant.bl { bottom: 0; left: 0; }
            .quadrant.br { bottom: 0; right: 0; }
            .selected-option {
                background-color: #ffcccc;
                padding: 2px 4px;
                border-radius: 3px;
            }
            .treatment-order {
                margin-top: 15px;
            }
            .treatment-order h2 {
                font-size: 14px;
                margin: 0 0 5px 0;
            }
            .order-table {
                font-size: 10px;
            }
            .special-treatments {
                display: flex;
                gap: 10px;
                margin-bottom: 5px;
            }
            .special-treatments > div {
                flex: 1;
                border: 1px solid #000;
                padding: 5px;
                text-align: center;
            }
            .plan-header {
                background-color: #e3f2fd;
                padding: 10px;
                margin-bottom: 10px;
                border-radius: 4px;
            }
            .plan-type {
                font-weight: bold;
                color: #1976D2;
            }
        </style>
    </head>
    <body>`;
    
    // 選択されたプランの情報を追加
    if (data.selectedPlan) {
      html += `
        <div class="plan-header">
            <span class="plan-type">選択プラン: ${data.selectedPlan}</span>
        </div>`;
    }
    
    html += `
        <h1>歯科治療計画書</h1>
        <table>`;
    
    // ヘッダー行
    html += `
            <tr class="header-row">
                <td colspan="5">
                    日付：${data.treatmentPlan.date || new Date().toLocaleDateString('ja-JP')}　
                    Dr：${data.treatmentPlan.doctorName || data.patientInfo.doctor || ''}　
                    DH：${data.treatmentPlan.dhName || ''}　`;
    
    // 医管選択
    if (data.treatmentPlan.medicalManagement) {
      if (data.treatmentPlan.medicalManagement.includes('総医')) {
        html += '<span class="selected-option">総医</span> ';
      }
      if (data.treatmentPlan.medicalManagement.includes('医管')) {
        html += '<span class="selected-option">医管</span>';
      }
    }
    
    html += `
                </td>
            </tr>`;
    
    // 患者情報
    html += `
            <tr class="patient-info">
                <td colspan="5">
                    <strong>患者名：</strong>${data.patientInfo.name}　
                    <strong>患者ID：</strong>${data.patientInfo.id}
                </td>
            </tr>`;
    
    // 治療計画表
    const treatments = [
      ['CR', 'SRP'],
      ['MTA', 'EXT'],
      ['エクストルージョン', 'クラウンレングス'],
      ['IN', 'ソケプリ'],
      ['ENDO', 'インプラント'],
      ['Cr', '再生療法'],
      ['Br', data.customFields?.row7Right || ''],
      ['OBS', data.customFields?.row8Right || ''],
      ['自由記入欄', 'NG']
    ];
    
    // 備考欄の内容を生成
    let remarksContent = '<div style="padding: 5px; font-size: 9px;">';
    
    // 患者情報（主訴等）
    if (data.patientInfo.chiefComplaint) {
      remarksContent += `<div><strong>主訴：</strong>${data.patientInfo.chiefComplaint}</div>`;
    }
    if (data.patientInfo.medicalHistory) {
      remarksContent += `<div><strong>全身疾患：</strong>${data.patientInfo.medicalHistory}</div>`;
    }
    if (data.patientInfo.medications) {
      remarksContent += `<div><strong>服用薬：</strong>${data.patientInfo.medications}</div>`;
    }
    if (data.patientInfo.precautions) {
      remarksContent += `<div><strong>注意事項：</strong>${data.patientInfo.precautions}</div>`;
    }
    
    // 喫煙
    remarksContent += `<div><strong>喫煙：</strong>${data.remarks.smoking || '無'}`;
    if (data.remarks.smokingAmount) {
      remarksContent += `（${data.remarks.smokingAmount}本/日）`;
    }
    remarksContent += '</div>';
    
    // 咬合
    if (data.remarks.occlusion) {
      remarksContent += `<div><strong>咬合：</strong>${data.remarks.occlusion}</div>`;
    }
    
    // その他の項目
    remarksContent += `<div><strong>Brx：</strong>${data.remarks.brx || ''}</div>`;
    remarksContent += `<div><strong>NG：</strong>${data.remarks.ng || ''}</div>`;
    remarksContent += `<div><strong>P：</strong>${data.remarks.p || ''}</div>`;
    remarksContent += `<div><strong>C：</strong>${data.remarks.c || ''}</div>`;
    remarksContent += `<div><strong>ortho：</strong>${data.remarks.ortho || ''}</div>`;
    
    // implantとHys
    remarksContent += '<div class="special-treatments">';
    remarksContent += '<div><strong>implant</strong><br>';
    if (data.treatments['implant'] && data.treatments['implant'].length > 0) {
      remarksContent += generateCrossDisplayHTML(data.treatments['implant']);
    }
    remarksContent += '</div>';
    remarksContent += '<div><strong>Hys</strong><br>';
    if (data.treatments['Hys'] && data.treatments['Hys'].length > 0) {
      remarksContent += generateCrossDisplayHTML(data.treatments['Hys']);
    }
    remarksContent += '</div>';
    remarksContent += '</div>';
    
    if (data.remarks.clearTools) {
      remarksContent += `<div><strong>Clear tools：</strong>${data.remarks.clearTools}</div>`;
    }
    
    if (data.remarks.ohiPolicy) {
      remarksContent += `<div><strong>OHI方針：</strong>${data.remarks.ohiPolicy}</div>`;
    }
    
    if (data.remarks.notes) {
      remarksContent += `<div><strong>備考：</strong>${data.remarks.notes}</div>`;
    }
    
    remarksContent += '</div>';
    
    // 治療項目の行を生成
    treatments.forEach((row, index) => {
      html += '<tr>';
      
      // 左側の治療項目
      const leftClass = row[0].length > 8 ? 'treatment-cell long-text' : 'treatment-cell';
      html += `<td class="${leftClass}">${row[0]}</td>`;
      
      // 9行目の特別処理
      if (index === 8) {
        html += `<td class="tooth-cell">${data.freeText || ''}</td>`;
      } else {
        html += '<td class="tooth-cell">';
        if (data.treatments[row[0]] && data.treatments[row[0]].length > 0) {
          html += generateCrossDisplayHTML(data.treatments[row[0]]);
        }
        html += '</td>';
      }
      
      // 右側の治療項目
      if (row[1]) {
        const rightClass = row[1].length > 8 ? 'treatment-cell long-text' : 'treatment-cell';
        html += `<td class="${rightClass}">${row[1]}</td>`;
        
        // 7行目と8行目の特別処理
        if (index === 6 || index === 7) {
          html += '<td class="tooth-cell">';
          const fieldName = index === 6 ? 'customRow7' : 'customRow8';
          if (data.treatments[fieldName] && data.treatments[fieldName].length > 0) {
            html += generateCrossDisplayHTML(data.treatments[fieldName]);
          }
          html += '</td>';
        } else if (index === 8) {
          // 9行目のNG
          html += `<td class="tooth-cell">${data.remarks.ngText || ''}</td>`;
        } else {
          html += '<td class="tooth-cell">';
          if (data.treatments[row[1]] && data.treatments[row[1]].length > 0) {
            html += generateCrossDisplayHTML(data.treatments[row[1]]);
          }
          html += '</td>';
        }
      } else {
        html += '<td colspan="2"></td>';
      }
      
      // 備考欄（最初の行にのみ表示）
      if (index === 0) {
        html += `<td class="remarks-cell" rowspan="${treatments.length}">${remarksContent}</td>`;
      }
      
      html += '</tr>';
    });
    
    html += '</table>';
    
    // 治療順序
    if (data.treatmentOrder && data.treatmentOrder.length > 0) {
      html += `
        <div class="treatment-order">
            <h2>治療順序</h2>
            <table class="order-table">
                <thead>
                    <tr>
                        <th width="10%">順序</th>
                        <th width="25%">治療内容</th>
                        <th width="35%">対象歯</th>
                        <th width="30%">備考</th>
                    </tr>
                </thead>
                <tbody>`;
      
      data.treatmentOrder.forEach((item, index) => {
        html += `
                    <tr>
                        <td style="text-align: center;">${index + 1}</td>
                        <td>${item.treatment}</td>
                        <td>${item.teeth}</td>
                        <td>${item.notes || ''}</td>
                    </tr>`;
      });
      
      html += `
                </tbody>
            </table>
        </div>`;
    }
    
    // 治療計画立案ガイドの内容を追加（必要に応じて）
    if (data.planningGuide) {
      html += `
        <div style="page-break-before: always;">
            <h2>治療計画立案の検討内容</h2>`;
      
      // 患者背景
      if (data.planningGuide.patientBackground) {
        html += '<h3>患者背景の考慮事項</h3><ul>';
        Object.entries(data.planningGuide.patientBackground).forEach(([key, value]) => {
          if (value && value !== '') {
            html += `<li>${key}: ${value}</li>`;
          }
        });
        html += '</ul>';
      }
      
      // その他の検討内容も同様に追加...
      
      html += '</div>';
    }
    
    html += `
    </body>
    </html>`;
    
    // PDFに変換
    const blob = Utilities.newBlob(html, 'text/html', 'temp.html');
    const pdf = blob.getAs('application/pdf');
    pdf.setName(fileName);
    
    // PDFを保存
    const file = folder.createFile(pdf);
    
    return {
      success: true,
      url: file.getUrl(),
      fileName: fileName
    };
    
  } catch (error) {
    console.error('PDF生成エラー:', error);
    return {
      success: false,
      error: error.toString()
    };
  }
}

// 十字表示を生成するヘルパー関数（PDF用）
function generateCrossDisplayHTML(teeth) {
  const grouped = {};
  teeth.forEach(tooth => {
    if (!grouped[tooth.position]) {
      grouped[tooth.position] = [];
    }
    grouped[tooth.position].push(tooth.number);
  });
  
  // テーブルを使って十字を表現
  let html = `
    <table style="border-collapse: collapse; width: 190px; height: 50px; margin: 2px auto; display: inline-table; border: none;">
      <tr>
        <td style="border-right: 1px solid #333; border-bottom: 1px solid #333; border-top: none; border-left: none; width: 50%; height: 50%; text-align: right; padding: 2px 8px 2px 2px; font-size: 14px; font-weight: bold; white-space: nowrap; overflow: visible; letter-spacing: 1px;">`;
  
  // 右上（降順：8→1、右寄せ）
  if (grouped['右上']) {
    const numbers = grouped['右上'].sort((a, b) => b - a);
    html += numbers.join(' ');
  }
  
  html += `</td>
        <td style="border-left: 1px solid #333; border-bottom: 1px solid #333; border-top: none; border-right: none; width: 50%; height: 50%; text-align: left; padding: 2px 2px 2px 8px; font-size: 14px; font-weight: bold; white-space: nowrap; overflow: visible; letter-spacing: 1px;">`;
  
  // 左上（昇順：1→8、左寄せ）
  if (grouped['左上']) {
    const numbers = grouped['左上'].sort((a, b) => a - b);
    html += numbers.join(' ');
  }
  
  html += `</td>
      </tr>
      <tr>
        <td style="border-right: 1px solid #333; border-top: 1px solid #333; border-bottom: none; border-left: none; width: 50%; height: 50%; text-align: right; padding: 2px 8px 2px 2px; font-size: 14px; font-weight: bold; white-space: nowrap; overflow: visible; letter-spacing: 1px;">`;
  
  // 右下（降順：8→1、右寄せ）
  if (grouped['右下']) {
    const numbers = grouped['右下'].sort((a, b) => b - a);
    html += numbers.join(' ');
  }
  
  html += `</td>
        <td style="border-left: 1px solid #333; border-top: 1px solid #333; border-bottom: none; border-right: none; width: 50%; height: 50%; text-align: left; padding: 2px 2px 2px 8px; font-size: 14px; font-weight: bold; white-space: nowrap; overflow: visible; letter-spacing: 1px;">`;
  
  // 左下（昇順：1→8、左寄せ）
  if (grouped['左下']) {
    const numbers = grouped['左下'].sort((a, b) => a - b);
    html += numbers.join(' ');
  }
  
  html += `</td>
      </tr>
    </table>`;
  
  return html;
}

// 治療計画のみのPDFを生成
function generateTreatmentOnlyPDF(data) {
  try {
    const folder = DriveApp.getFolderById(PDF_FOLDER_ID);
    const timestamp = new Date().toLocaleDateString('ja-JP').replace(/\//g, '');
    const fileName = `治療計画_${data.patientInfo.name}_${data.patientInfo.id}_${timestamp}.pdf`;
    
    // HTML生成
    let html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            @page { 
              margin: 15mm;
              size: A4 portrait;
            }
            body {
                font-family: 'Noto Sans JP', sans-serif;
                margin: 0;
                padding: 0;
                font-size: 12px;
                line-height: 1.5;
            }
            h1 {
                text-align: center;
                font-size: 18px;
                margin: 0 0 20px 0;
            }
            .patient-info {
                margin-bottom: 20px;
                font-size: 14px;
            }
            table {
                width: 100%;
                max-width: 900px;
                margin: 0 auto;
                border-collapse: collapse;
                table-layout: fixed;
            }
            th, td {
                border: 1px solid #000;
                padding: 8px;
                text-align: left;
                vertical-align: middle;
            }
            .treatment-cell {
                width: 100px;
                text-align: center;
                font-weight: bold;
                font-size: 14px;
                white-space: nowrap;
            }
            .treatment-cell.long-text {
                font-size: 11px;
            }
            .tooth-cell {
                width: 200px;
                text-align: center;
                padding: 10px 5px;
            }
            .date-info {
                text-align: right;
                margin-bottom: 10px;
                font-size: 12px;
            }
            .plan-header {
                background-color: #e3f2fd;
                padding: 10px;
                margin-bottom: 10px;
                border-radius: 4px;
                text-align: center;
            }
            .plan-type {
                font-weight: bold;
                color: #1976D2;
                font-size: 16px;
            }
        </style>
    </head>
    <body>`;
    
    // 選択されたプランの情報を追加
    if (data.selectedPlan) {
      html += `
        <div class="plan-header">
            <span class="plan-type">${data.selectedPlan}</span>
        </div>`;
    }
    
    html += `
        <h1>歯科治療計画</h1>
        <div class="date-info">
            作成日：${data.treatmentPlan.date || new Date().toLocaleDateString('ja-JP')}
        </div>
        <div class="patient-info">
            <strong>患者名：</strong>${data.patientInfo.name}　
            <strong>患者ID：</strong>${data.patientInfo.id}
        </div>
        <table>`;
    
    // 治療計画表（4列）
    const treatments = [
      ['CR', 'SRP'],
      ['MTA', 'EXT'],
      ['エクストルージョン', 'クラウンレングス'],
      ['IN', 'ソケプリ'],
      ['ENDO', 'インプラント'],
      ['Cr', '再生療法'],
      ['Br', data.customFields?.row7Right || ''],
      ['OBS', data.customFields?.row8Right || ''],
      ['自由記入欄', 'NG']
    ];
    
    // 各治療項目の行を生成
    treatments.forEach((row, index) => {
      html += '<tr>';
      
      // 左側の治療項目
      const leftClass = row[0].length > 8 ? 'treatment-cell long-text' : 'treatment-cell';
      html += `<td class="${leftClass}">${row[0]}</td>`;
      
      // 左側の歯式（2列目）
      html += '<td class="tooth-cell">';
      if (index === 8) {
        // 自由記入欄
        html += data.freeText || '';
      } else {
        if (data.treatments[row[0]] && data.treatments[row[0]].length > 0) {
          html += generateCrossDisplayHTML(data.treatments[row[0]]);
        }
      }
      html += '</td>';
      
      // 右側の治療項目
      if (row[1]) {
        const rightClass = row[1].length > 8 ? 'treatment-cell long-text' : 'treatment-cell';
        html += `<td class="${rightClass}">${row[1]}</td>`;
        
        // 右側の歯式（4列目）
        html += '<td class="tooth-cell">';
        if (index === 6 || index === 7) {
          // カスタムフィールドの場合
          const fieldName = index === 6 ? 'customRow7' : 'customRow8';
          if (data.treatments[fieldName] && data.treatments[fieldName].length > 0) {
            html += generateCrossDisplayHTML(data.treatments[fieldName]);
          }
        } else if (index === 8) {
          // NGの詳細
          html += data.remarks?.ngText || '';
        } else {
          // 通常の治療項目
          if (data.treatments[row[1]] && data.treatments[row[1]].length > 0) {
            html += generateCrossDisplayHTML(data.treatments[row[1]]);
          }
        }
        html += '</td>';
      } else {
        html += '<td colspan="2"></td>';
      }
      
      html += '</tr>';
    });
    
    html += `
        </table>
    </body>
    </html>`;
    
    // PDFに変換
    const blob = Utilities.newBlob(html, 'text/html', 'temp.html');
    const pdf = blob.getAs('application/pdf');
    pdf.setName(fileName);
    
    // PDFを保存
    const file = folder.createFile(pdf);
    
    return {
      success: true,
      url: file.getUrl(),
      fileName: fileName
    };
    
  } catch (error) {
    console.error('PDF生成エラー:', error);
    return {
      success: false,
      error: error.toString()
    };
  }
}

// 複数プランの比較PDFを生成
function generateComparisonPDF(data) {
  try {
    const folder = DriveApp.getFolderById(PDF_FOLDER_ID);
    const timestamp = new Date().toLocaleDateString('ja-JP').replace(/\//g, '');
    const fileName = `治療計画比較_${data.patientInfo.name}_${data.patientInfo.id}_${timestamp}.pdf`;
    
    // HTML生成
    let html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            @page { 
              margin: 10mm;
              size: A4 landscape;
            }
            body {
                font-family: 'Noto Sans JP', sans-serif;
                margin: 0;
                padding: 0;
                font-size: 10px;
                line-height: 1.3;
            }
            h1 {
                text-align: center;
                font-size: 16px;
                margin: 0 0 10px 0;
            }
            .comparison-table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 10px;
            }
            .comparison-table th,
            .comparison-table td {
                border: 1px solid #333;
                padding: 4px;
                text-align: center;
                vertical-align: middle;
            }
            .comparison-table th {
                background-color: #f0f0f0;
                font-weight: bold;
            }
            .plan-header {
                background-color: #e3f2fd;
                font-weight: bold;
                font-size: 12px;
            }
            .plan-ideal { background-color: #fff8e1; }
            .plan-standard { background-color: #e3f2fd; }
            .plan-insurance { background-color: #e8f5e9; }
            .treatment-item {
                font-weight: bold;
                background-color: #f5f5f5;
            }
            .tooth-display {
                font-size: 9px;
                line-height: 1.2;
            }
        </style>
    </head>
    <body>
        <h1>治療計画比較表</h1>
        <div style="margin-bottom: 10px;">
            <strong>患者名：</strong>${data.patientInfo.name}　
            <strong>患者ID：</strong>${data.patientInfo.id}　
            <strong>作成日：</strong>${new Date().toLocaleDateString('ja-JP')}
        </div>`;
    
    // 比較表を生成
    if (data.plans) {
      html += '<table class="comparison-table">';
      html += '<thead><tr>';
      html += '<th width="15%">治療項目</th>';
      
      // プランのヘッダー
      Object.keys(data.plans).forEach(planKey => {
        const planName = getPlanDisplayName(planKey);
        html += `<th class="plan-header plan-${planKey}">${planName}</th>`;
      });
      
      html += '</tr></thead><tbody>';
      
      // 治療項目ごとに比較
      const allTreatments = [
        'CR', 'MTA', 'IN', 'ENDO', 'エクストルージョン', 'クラウンレングス',
        'Cr', 'Br', 'OBS', 'SRP', 'EXT', 'ソケプリ', 'インプラント',
        '再生療法', 'implant', 'Hys'
      ];
      
      allTreatments.forEach(treatment => {
        html += '<tr>';
        html += `<td class="treatment-item">${treatment}</td>`;
        
        Object.keys(data.plans).forEach(planKey => {
          html += '<td class="tooth-display">';
          const planData = data.plans[planKey];
          if (planData.treatments && planData.treatments[treatment]) {
            html += formatTeethForComparison(planData.treatments[treatment]);
          } else {
            html += '-';
          }
          html += '</td>';
        });
        
        html += '</tr>';
      });
      
      // 費用・期間の比較（仮の値）
      html += '<tr>';
      html += '<td class="treatment-item">概算費用</td>';
      Object.keys(data.plans).forEach(planKey => {
        html += '<td>';
        if (planKey === 'ideal') html += '約150万円';
        else if (planKey === 'standard') html += '約80万円';
        else if (planKey === 'insurance') html += '約15万円';
        else html += '要相談';
        html += '</td>';
      });
      html += '</tr>';
      
      html += '<tr>';
      html += '<td class="treatment-item">治療期間</td>';
      Object.keys(data.plans).forEach(planKey => {
        html += '<td>';
        if (planKey === 'ideal') html += '約12ヶ月';
        else if (planKey === 'standard') html += '約8ヶ月';
        else if (planKey === 'insurance') html += '約4ヶ月';
        else html += '要相談';
        html += '</td>';
      });
      html += '</tr>';
      
      html += '</tbody></table>';
    }
    
    html += `
    </body>
    </html>`;
    
    // PDFに変換
    const blob = Utilities.newBlob(html, 'text/html', 'temp.html');
    const pdf = blob.getAs('application/pdf');
    pdf.setName(fileName);
    
    // PDFを保存
    const file = folder.createFile(pdf);
    
    return {
      success: true,
      url: file.getUrl(),
      fileName: fileName
    };
    
  } catch (error) {
    console.error('PDF生成エラー:', error);
    return {
      success: false,
      error: error.toString()
    };
  }
}

// プラン名の表示用変換
function getPlanDisplayName(planKey) {
  const names = {
    'ideal': '理想プラン',
    'standard': '標準プラン',
    'insurance': '保険プラン'
  };
  return names[planKey] || `カスタムプラン${planKey.replace('custom', '')}`;
}

// 歯式を比較表示用にフォーマット
function formatTeethForComparison(teeth) {
  const grouped = {};
  teeth.forEach(tooth => {
    if (!grouped[tooth.position]) {
      grouped[tooth.position] = [];
    }
    grouped[tooth.position].push(tooth.number);
  });
  
  let result = [];
  ['右上', '左上', '右下', '左下'].forEach(position => {
    if (grouped[position]) {
      const numbers = grouped[position].sort((a, b) => {
        if (position === '右上' || position === '右下') {
          return b - a; // 降順
        } else {
          return a - b; // 昇順
        }
      });
      result.push(`${position}: ${numbers.join(',')}`);
    }
  });
  
  return result.join('<br>');
}