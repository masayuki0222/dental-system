<!DOCTYPE html>
<html>
<head>
    <base target="_top">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>歯科治療計画書システム</title>
    
    <style>
        * {
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            font-size: 14px;
            -webkit-font-smoothing: antialiased;
            padding-bottom: 80px;
        }

        /* 分割画面レイアウト */
        .main-container {
            display: flex;
            height: calc(100vh - 80px);
            overflow: hidden;
        }

        .left-panel {
            width: 40%;
            min-width: 300px;
            background-color: #f8f9fa;
            overflow-y: auto;
            border-right: 2px solid #ddd;
            position: relative;
        }

        .right-panel {
            flex: 1;
            overflow-y: auto;
            background-color: white;
        }

        /* 分割線ドラッグ */
        .split-divider {
            position: absolute;
            right: -5px;
            top: 0;
            bottom: 0;
            width: 10px;
            cursor: col-resize;
            background-color: transparent;
            z-index: 100;
        }

        .split-divider:hover {
            background-color: rgba(33, 150, 243, 0.3);
        }

        /* ヘッダー */
        .panel-header {
            position: sticky;
            top: 0;
            background-color: white;
            padding: 15px;
            border-bottom: 1px solid #ddd;
            z-index: 50;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .panel-header h2 {
            margin: 0;
            font-size: 18px;
            color: #333;
        }

        /* タブナビゲーション */
        .tab-navigation {
            display: flex;
            background-color: #f5f5f5;
            border-bottom: 2px solid #ddd;
            position: sticky;
            top: 60px;
            z-index: 40;
        }

        .tab-btn {
            padding: 12px 24px;
            border: none;
            background-color: transparent;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: #666;
            transition: all 0.3s;
            border-bottom: 3px solid transparent;
        }

        .tab-btn:hover {
            background-color: #e0e0e0;
        }

        .tab-btn.active {
            color: #2196F3;
            background-color: white;
            border-bottom-color: #2196F3;
        }

        .tab-content {
            display: none;
            padding: 20px;
        }

        .tab-content.active {
            display: block;
        }

        /* プランタブ */
        .plan-tabs {
            display: flex;
            gap: 5px;
            padding: 10px;
            background-color: #fafafa;
            border-bottom: 1px solid #ddd;
            overflow-x: auto;
        }

        .plan-tab {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background-color: white;
            cursor: pointer;
            font-size: 13px;
            border-radius: 4px 4px 0 0;
            transition: all 0.3s;
            white-space: nowrap;
        }

        .plan-tab:hover {
            background-color: #f5f5f5;
        }

        .plan-tab.active {
            background-color: #fff;
            border-bottom-color: white;
            position: relative;
            z-index: 1;
        }

        .plan-tab.ideal {
            border-top: 3px solid #FFD700;
        }

        .plan-tab.standard {
            border-top: 3px solid #2196F3;
        }

        .plan-tab.insurance {
            border-top: 3px solid #4CAF50;
        }

        .plan-tab.custom {
            border-top: 3px solid #9E9E9E;
        }

        .add-plan-btn {
            padding: 8px 16px;
            border: 1px dashed #999;
            background-color: transparent;
            cursor: pointer;
            font-size: 13px;
            border-radius: 4px 4px 0 0;
            color: #666;
        }

        .add-plan-btn:hover {
            background-color: #f5f5f5;
            border-color: #666;
        }

        /* セクション */
        .section {
            margin: 15px;
            padding: 20px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        /* アコーディオン */
        .accordion {
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            overflow: hidden;
        }

        .accordion-header {
            background-color: #f5f5f5;
            padding: 15px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background-color 0.3s;
        }

        .accordion-header:hover {
            background-color: #e0e0e0;
        }

        .accordion-header.active {
            background-color: #e3f2fd;
            border-bottom: 1px solid #ddd;
        }

        .accordion-icon {
            transition: transform 0.3s;
        }

        .accordion-header.active .accordion-icon {
            transform: rotate(180deg);
        }

        .accordion-content {
            display: none;
            padding: 20px;
            background-color: white;
        }

        .accordion-content.active {
            display: block;
        }

        /* ガイドフォーム要素 */
        .guide-question {
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
            font-size: 15px;
        }

        .guide-checkbox-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 15px;
        }

        .guide-checkbox-item {
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }

        .guide-checkbox-item input[type="checkbox"] {
            margin-top: 3px;
        }

        .guide-checkbox-label {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .guide-detail-input {
            flex: 1;
            padding: 6px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 13px;
        }

        .guide-radio-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .guide-radio-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .guide-tooth-selection {
            margin: 15px 0;
            padding: 15px;
            background-color: #f5f5f5;
            border-radius: 4px;
        }

        .guide-tooth-btn {
            background-color: #2196F3;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-bottom: 10px;
        }

        .guide-tooth-btn:hover {
            background-color: #1976D2;
        }

        .selected-teeth-display {
            margin-top: 10px;
            padding: 10px;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-height: 40px;
        }

        .tooth-item {
            display: inline-block;
            background-color: #e3f2fd;
            padding: 4px 8px;
            margin: 2px;
            border-radius: 3px;
            font-size: 12px;
        }

        .tooth-item-reason {
            margin-left: 5px;
            color: #666;
            font-size: 11px;
        }

        .guide-textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 13px;
            resize: vertical;
            min-height: 80px;
        }

        .transfer-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin: 20px auto;
            display: block;
        }

        .transfer-btn:hover {
            background-color: #45a049;
        }

        /* 画像ギャラリー */
        .image-gallery {
            padding: 15px;
        }

        .gallery-view-toggle {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: center;
        }

        .view-mode-btn {
            padding: 8px 15px;
            border: 1px solid #ddd;
            background-color: white;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.3s;
        }

        .view-mode-btn.active {
            background-color: #2196F3;
            color: white;
            border-color: #2196F3;
        }

        .gallery-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .gallery-section {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 15px;
            background-color: #fafafa;
            position: relative;
        }

        .gallery-section.drag-over {
            background-color: #e3f2fd;
            border-color: #2196F3;
        }

        .gallery-section h4 {
            margin: 0 0 10px 0;
            color: #333;
            font-size: 14px;
        }

        .split-view {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            height: 400px;
        }

        .split-section {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 10px;
            background-color: white;
            overflow-y: auto;
        }

        /* 一括アップロードボタン */
        .bulk-upload-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-bottom: 10px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .bulk-upload-btn:hover {
            background-color: #45a049;
        }

        /* サムネイル表示 */
        .thumbnail-grid {
            display: grid;
            gap: 10px;
        }

        .thumbnail-grid.intraoral {
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            max-width: 495px;
            margin: 0 auto;
        }

        .thumbnail-grid.xray-bw {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        }

        .thumbnail-grid.dental-10 {
            grid-template-columns: repeat(5, 1fr);
            gap: 8px;
        }

        .thumbnail {
            position: relative;
            aspect-ratio: 4/3;
            background-color: #f0f0f0;
            border-radius: 4px;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s;
            border: 2px dashed #ccc;
        }

        /* 口腔内写真の配置 */
        .thumbnail.intraoral-upper {
            grid-column: 2;
            grid-row: 1;
        }

        .thumbnail.intraoral-right {
            grid-column: 1;
            grid-row: 2;
        }

        .thumbnail.intraoral-front {
            grid-column: 2;
            grid-row: 2;
        }

        .thumbnail.intraoral-left {
            grid-column: 3;
            grid-row: 2;
        }

        .thumbnail.intraoral-lower {
            grid-column: 2;
            grid-row: 3;
        }

        /* デンタル10枚法の縦型 */
        .thumbnail.dental-portrait {
            aspect-ratio: 3/4;
        }

        .thumbnail.large {
            grid-column: span 2;
            aspect-ratio: 2/1;
        }

        .thumbnail.perio {
            grid-column: span 2;
            aspect-ratio: 2/1;
        }

        .thumbnail.has-image {
            border-style: solid;
            border-color: #ddd;
            cursor: move;
        }

        .thumbnail:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .thumbnail.drag-over {
            border-color: #2196F3;
            background-color: #e3f2fd;
            transform: scale(1.1);
        }

        .thumbnail.dragging {
            opacity: 0.5;
            cursor: grabbing;
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            pointer-events: none;
            user-select: none;
        }

        .thumbnail-label {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 4px;
            font-size: 11px;
            text-align: center;
            pointer-events: none;
        }

        /* 画像編集ボタン */
        .image-controls {
            position: absolute;
            top: 5px;
            right: 5px;
            display: none;
            gap: 3px;
            flex-direction: column;
            z-index: 10;
        }

        .thumbnail.has-image:hover .image-controls {
            display: flex;
        }

        .image-control-btn {
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 3px;
            width: 28px;
            height: 28px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s;
        }

        .image-control-btn:hover {
            background-color: rgba(0, 0, 0, 0.9);
        }

        .image-control-btn.delete {
            background-color: rgba(244, 67, 54, 0.9);
        }

        .image-control-btn.delete:hover {
            background-color: rgba(244, 67, 54, 1);
        }

        /* 大きい画像表示 */
        .large-image-viewer {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            text-align: center;
            min-height: 200px;
        }

        .large-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        /* ドロップゾーンのヒント */
        .drop-hint {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(33, 150, 243, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            font-size: 14px;
            pointer-events: none;
            display: none;
            z-index: 100;
        }

        .gallery-section.drag-over .drop-hint {
            display: block;
        }

        /* 患者情報フォーム */
        .patient-info-form {
            padding: 15px;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
            color: #555;
            font-size: 13px;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #2196F3;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }

        /* 治療計画ヘッダー */
        .treatment-header {
            background-color: #f5f5f5;
            padding: 10px;
            border: 1px solid #ddd;
            margin-bottom: -1px;
        }

        .header-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr auto;
            gap: 10px;
            align-items: center;
        }

        .header-input {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .header-input label {
            font-weight: bold;
            font-size: 13px;
            white-space: nowrap;
        }

        .header-input input {
            flex: 1;
            padding: 5px 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 13px;
        }

        .medical-buttons {
            display: flex;
            gap: 5px;
        }

        .medical-btn {
            padding: 5px 15px;
            border: 1px solid #ddd;
            background-color: white;
            border-radius: 4px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.3s;
        }

        .medical-btn.selected {
            background-color: #ffcccc;
            border-color: #ff9999;
        }

        /* 歯式パレット */
        .tooth-palette-container {
            position: sticky;
            top: 70px;
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            z-index: 40;
            margin: 15px;
        }

        .current-selection {
            background-color: #e3f2fd;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
            text-align: center;
            font-weight: bold;
            color: #1976D2;
        }

        .tooth-chart {
            max-width: 500px;
            margin: 0 auto;
        }

        .tooth-chart-grid {
            display: grid;
            grid-template-columns: repeat(16, 1fr);
            gap: 2px;
            position: relative;
        }

        .cross-line-horizontal {
            position: absolute;
            left: 0;
            right: 0;
            height: 2px;
            background-color: #333;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none;
        }

        .cross-line-vertical {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 2px;
            background-color: #333;
            left: 50%;
            transform: translateX(-50%);
            pointer-events: none;
        }

        .tooth-btn {
            aspect-ratio: 1;
            border: 1px solid #ddd;
            background-color: white;
            cursor: pointer;
            font-size: 12px;
            font-weight: bold;
            transition: all 0.3s;
            border-radius: 4px;
            padding: 0;
            min-height: 30px;
        }

        .tooth-btn:hover {
            background-color: #e3f2fd;
            border-color: #2196F3;
            transform: scale(1.1);
        }

        .tooth-btn.selected {
            background-color: #ffeb3b;
            border-color: #f57f17;
        }

        .tooth-divider {
            grid-column: 1 / -1;
            height: 20px;
            position: relative;
        }

        /* 治療計画表 */
        .treatment-table {
            width: 100%;
            border-collapse: collapse;
        }

        .treatment-table th,
        .treatment-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
            vertical-align: middle;
        }

        .treatment-table th {
            background-color: #f5f5f5;
            font-weight: normal;
        }

        .treatment-cell {
            text-align: center;
            font-weight: bold;
        }

        .treatment-cell.long-text {
            font-size: 11px;
        }

        .treatment-field {
            cursor: pointer;
            min-height: 50px;
            padding: 5px;
            border: 2px solid transparent;
            transition: all 0.3s;
            position: relative;
            background-color: #fafafa;
        }

        .treatment-field:hover {
            background-color: #f0f0f0;
            border-color: #ddd;
        }

        .treatment-field.active {
            border-color: #2196F3;
            background-color: #e3f2fd;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.2);
        }

        .custom-field-input {
            width: 100%;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
            text-align: center;
        }

        .free-text-area {
            width: 100%;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
            resize: vertical;
            min-height: 40px;
        }

        .ng-text-input,
        .multi-line-input {
            width: 100%;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
            resize: vertical;
            min-height: 40px;
        }

        /* 十字表示 */
        .cross-display {
            display: inline-block;
            width: 80px;
            height: 50px;
            position: relative;
            margin: 2px;
            border: 1px solid #999;
        }

        .cross-display::before {
            content: "";
            position: absolute;
            width: 100%;
            height: 1px;
            background-color: #333;
            top: 50%;
            left: 0;
            transform: translateY(-50%);
        }

        .cross-display::after {
            content: "";
            position: absolute;
            width: 1px;
            height: 100%;
            background-color: #333;
            left: 50%;
            top: 0;
            transform: translateX(-50%);
        }

        .quadrant {
            position: absolute;
            width: 50%;
            height: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: bold;
        }

        .quadrant.top-right { top: 0; right: 0; }
        .quadrant.top-left { top: 0; left: 0; }
        .quadrant.bottom-right { bottom: 0; right: 0; }
        .quadrant.bottom-left { bottom: 0; left: 0; }

        /* 特別な治療項目 */
        .special-treatments {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #f0f0f0;
            border-radius: 4px;
        }

        .special-treatment-item {
            flex: 1;
            text-align: center;
        }

        .special-treatment-label {
            font-weight: bold;
            margin-bottom: 5px;
            font-size: 12px;
        }

        /* 備考欄 */
        .remarks-section {
            padding: 10px;
            font-size: 12px;
        }

        .patient-info-section {
            background-color: #f9f9f9;
            padding: 8px;
            margin-bottom: 10px;
            border-radius: 4px;
            border: 1px solid #e0e0e0;
        }

        .patient-info-section div {
            margin-bottom: 5px;
        }

        .patient-info-input {
            width: 100%;
            padding: 4px 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
            resize: vertical;
            min-height: 20px;
        }

        .remarks-row {
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .remarks-label {
            font-weight: bold;
            min-width: 70px;
            font-size: 12px;
        }

        .radio-group,
        .select-group {
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: wrap;
        }

        .radio-group label,
        .select-group label {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
            font-size: 12px;
        }

        .remarks-input {
            flex: 1;
            padding: 4px 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 12px;
        }

        .select-btn {
            padding: 4px 10px;
            border: 1px solid #ddd;
            background-color: white;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
        }

        .select-btn.selected {
            background-color: #e3f2fd;
            border-color: #2196F3;
        }

        /* 治療順序 */
        .treatment-order-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            margin-top: 20px;
        }

        .auto-generate-section {
            background-color: #f0f7ff;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border: 1px solid #2196F3;
        }

        .auto-generate-btn {
            background-color: #2196F3;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .auto-generate-btn:hover {
            background-color: #1976D2;
        }

        .treatment-order-item {
            display: grid;
            grid-template-columns: 30px 40px 200px 200px auto 100px;
            gap: 10px;
            align-items: center;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
            border: 1px solid #e0e0e0;
            cursor: move;
        }

        .treatment-order-item.dragging {
            opacity: 0.5;
        }

        .drag-handle {
            font-size: 18px;
            color: #666;
            cursor: grab;
            user-select: none;
        }

        .drag-handle:active {
            cursor: grabbing;
        }

        .order-number {
            background-color: #2196F3;
            color: white;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .treatment-select,
        .teeth-input,
        .notes-input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        .treatment-select:focus,
        .teeth-input:focus,
        .notes-input:focus {
            outline: none;
            border-color: #2196F3;
        }

        .delete-order-btn {
            background-color: #f44336;
            color: white;
            border: none;
            padding: 5px 15px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .delete-order-btn:hover {
            background-color: #d32f2f;
        }

        .add-order-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
            transition: background-color 0.3s;
        }

        .add-order-btn:hover {
            background-color: #45a049;
        }

        /* ボタン */
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
            display: inline-block;
            text-align: center;
            margin: 5px;
        }

        .btn-primary {
            background-color: #2196F3;
            color: white;
        }

        .btn-primary:hover {
            background-color: #1976D2;
        }

        .btn-success {
            background-color: #4CAF50;
            color: white;
        }

        .btn-success:hover {
            background-color: #45a049;
        }

        .btn-danger {
            background-color: #f44336;
            color: white;
        }

        .btn-danger:hover {
            background-color: #d32f2f;
        }

        .btn-secondary {
            background-color: #9C27B0;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #7B1FA2;
        }

        .btn-info {
            background-color: #17a2b8;
            color: white;
        }

        .btn-info:hover {
            background-color: #138496;
        }

        .btn-warning {
            background-color: #FF9800;
            color: white;
        }

        .btn-warning:hover {
            background-color: #F57C00;
        }
         /* アクションバー */
        .action-bar {
            position: fixed;
            bottom: 0;
            right: 0;
            left: 0;
            background-color: white;
            border-top: 1px solid #ddd;
            padding: 15px;
            display: flex;
            justify-content: center;
            gap: 10px;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            height: 80px;
        }

        /* モーダル */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            overflow-y: auto;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 50px auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
            position: relative;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #aaa;
        }

        .close:hover {
            color: #000;
        }

        /* ローディング */
        .loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading p {
            color: white;
            margin-top: 20px;
            font-size: 16px;
        }

        /* ファイルリスト */
        .file-item {
            padding: 15px;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #fafafa;
        }

        .file-item:hover {
            background-color: #f5f5f5;
            border-color: #2196F3;
        }

        .file-item-info {
            flex: 1;
        }

        .file-item-actions {
            display: flex;
            gap: 10px;
        }

        /* 歯式選択モーダル */
        .tooth-selection-modal {
            display: none;
            position: fixed;
            z-index: 3000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .tooth-selection-content {
            background-color: white;
            margin: 50px auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
            position: relative;
        }

        .tooth-selection-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .tooth-selection-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }

        .tooth-selection-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            justify-content: flex-end;
        }

        /* レスポンシブ対応 */
        @media (max-width: 1024px) {
            .main-container {
                flex-direction: column;
                height: calc(100vh - 80px);
            }
            
            .left-panel {
                width: 100%;
                height: 40vh;
                border-right: none;
                border-bottom: 2px solid #ddd;
            }
            
            .split-divider {
                display: none;
            }
            
            .treatment-order-item {
                grid-template-columns: 30px 40px 1fr;
                gap: 5px;
            }
            
            .treatment-select,
            .teeth-input,
            .notes-input,
            .delete-order-btn {
                grid-column: 3;
                margin-top: 5px;
            }
            
            .header-inputs {
                grid-template-columns: 1fr;
                gap: 5px;
            }
        }

        @media (max-width: 768px) {
            body {
                padding-bottom: 100px;
            }
            
            .action-bar {
                height: 120px;
                flex-wrap: wrap;
                padding: 10px;
            }
            
            .thumbnail-grid {
                grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
            }
            
            .btn {
                font-size: 11px;
                padding: 8px 12px;
            }
        }

        /* iPadタッチ最適化 */
        @media (pointer: coarse) {
            .tooth-btn {
                min-height: 44px;
            }
            
            .btn {
                min-height: 44px;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            input, select, textarea {
                font-size: 16px;
            }
        }

        /* 印刷用スタイル */
        @media print {
            .left-panel,
            .action-bar,
            .btn,
            .split-divider,
            .gallery-view-toggle,
            .image-controls {
                display: none !important;
            }
            
            .main-container {
                display: block;
            }
            
            .right-panel {
                width: 100%;
            }
            
            body {
                background: white;
                padding-bottom: 0;
            }
        }

        /* 歯式選択の視覚的フィードバック */
        .tooth-btn {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        .tooth-btn.drag-selecting {
            background-color: #bbdefb;
            border-color: #1976D2;
        }

        .tooth-chart.dragging {
            cursor: crosshair;
        }

        .selection-hint {
            background-color: #e3f2fd;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
            font-size: 12px;
            color: #1976D2;
        }

        /* プログレスバー */
        .progress-bar {
            background-color: #f0f0f0;
            height: 4px;
            position: relative;
            margin-bottom: 20px;
        }

        .progress-fill {
            background-color: #2196F3;
            height: 100%;
            width: 0;
            transition: width 0.3s;
        }

        .progress-text {
            text-align: center;
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- 左パネル：診査データ -->
        <div class="left-panel">
            <div class="split-divider"></div>
            
            <div class="panel-header">
                <h2>診査データ</h2>
            </div>
            
            <!-- 患者情報（簡素化） -->
            <div class="section">
                <h3>患者基本情報</h3>
                <div class="patient-info-form">
                    <div class="form-group">
                        <label>患者名 <span style="color: red;">*</span></label>
                        <input type="text" id="patientName" placeholder="山田 太郎">
                    </div>
                    <div class="form-group">
                        <label>患者ID <span style="color: red;">*</span></label>
                        <input type="text" id="patientId" placeholder="12345">
                    </div>
                </div>
            </div>
                      
            <!-- 画像ギャラリー（拡張） -->
            <div class="section">
                <h3>画像・検査データ</h3>
                <div class="image-gallery">
                    <div class="gallery-view-toggle">
                        <span style="font-weight: bold;">表示モード：</span>
                        <button class="view-mode-btn active" onclick="setViewMode('single')">単独表示</button>
                        <button class="view-mode-btn" onclick="setViewMode('split')">分割表示</button>
                    </div>
                    
                    <!-- 単独表示モード -->
                    <div id="single-view" class="gallery-container">
                        <!-- 口腔内写真 -->
                        <div class="gallery-section" data-section-type="intraoral" data-max-images="5">
                            <h4>口腔内写真</h4>
                            <button class="bulk-upload-btn" onclick="bulkUploadIntraoral()">
                                <span>📷</span>
                                <span>5枚法一括アップロード</span>
                            </button>
                            <div class="drop-hint">ここに画像をドロップ（最大5枚）</div>
                            <div class="thumbnail-grid intraoral" id="intraoral-thumbnails">
                                <div class="thumbnail intraoral-upper" data-type="intraoral" data-position="upper">
                                    <div class="thumbnail-label">上顎咬合面</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                                <div class="thumbnail intraoral-right" data-type="intraoral" data-position="right">
                                    <div class="thumbnail-label">右側面観</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                                <div class="thumbnail intraoral-front" data-type="intraoral" data-position="front">
                                    <div class="thumbnail-label">正面観</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                                <div class="thumbnail intraoral-left" data-type="intraoral" data-position="left">
                                    <div class="thumbnail-label">左側面観</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                                <div class="thumbnail intraoral-lower" data-type="intraoral" data-position="lower">
                                    <div class="thumbnail-label">下顎咬合面</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- レントゲン -->
                        <div class="gallery-section">
                            <h4>レントゲン</h4>
                            <div class="thumbnail-grid xray-bw" id="xray-thumbnails">
                                <div class="thumbnail large" data-type="xray" data-position="panorama">
                                    <div class="thumbnail-label">パノラマ</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                                <div class="thumbnail" data-type="xray" data-position="bw-right">
                                    <div class="thumbnail-label">右側BW</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                                <div class="thumbnail" data-type="xray" data-position="bw-left">
                                    <div class="thumbnail-label">左側BW</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                            </div>
                            
                            <h4 style="margin-top: 15px;">デンタル10枚法</h4>
                            <div class="gallery-section" data-section-type="dental10" data-max-images="10" style="padding: 10px;">
                                <button class="bulk-upload-btn" onclick="bulkUploadDental10()">
                                    <span>🦷</span>
                                    <span>10枚法一括アップロード</span>
                                </button>
                                <div class="drop-hint">ここに画像をドロップ（最大10枚）</div>
                                <div class="thumbnail-grid dental-10">
                                    <div class="thumbnail" data-type="xray" data-position="10-1">
                                        <div class="thumbnail-label">1</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail dental-portrait" data-type="xray" data-position="10-2">
                                        <div class="thumbnail-label">2</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail dental-portrait" data-type="xray" data-position="10-3">
                                        <div class="thumbnail-label">3</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail dental-portrait" data-type="xray" data-position="10-4">
                                        <div class="thumbnail-label">4</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail" data-type="xray" data-position="10-5">
                                        <div class="thumbnail-label">5</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail" data-type="xray" data-position="10-6">
                                        <div class="thumbnail-label">6</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail dental-portrait" data-type="xray" data-position="10-7">
                                        <div class="thumbnail-label">7</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail dental-portrait" data-type="xray" data-position="10-8">
                                        <div class="thumbnail-label">8</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail dental-portrait" data-type="xray" data-position="10-9">
                                        <div class="thumbnail-label">9</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                    <div class="thumbnail" data-type="xray" data-position="10-10">
                                        <div class="thumbnail-label">10</div>
                                        <div class="image-controls">
                                            <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                            <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                            <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                            <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 歯周検査 -->
                        <div class="gallery-section">
                            <h4>歯周検査</h4>
                            <div class="thumbnail-grid">
                                <div class="thumbnail perio" data-type="perio" data-position="chart">
                                    <div class="thumbnail-label">歯周検査表</div>
                                    <div class="image-controls">
                                        <button class="image-control-btn" onclick="flipImageVertical(event, this)" title="上下反転">↕</button>
                                        <button class="image-control-btn" onclick="flipImageHorizontal(event, this)" title="左右反転">↔</button>
                                        <button class="image-control-btn" onclick="rotateImage(event, this)" title="90度回転">↻</button>
                                        <button class="image-control-btn delete" onclick="deleteImage(event, this)" title="削除">×</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- 分割表示モード -->
                    <div id="split-view" class="split-view" style="display: none;">
                        <div class="split-section">
                            <h4>口腔内写真</h4>
                            <div id="split-intraoral"></div>
                        </div>
                        <div class="split-section">
                            <h4>レントゲン</h4>
                            <div id="split-xray"></div>
                        </div>
                    </div>
                </div>
                
                <!-- 大きい画像表示エリア -->
                <div class="large-image-viewer" id="largeImageViewer">
                    <div id="largeImageContainer">
                        <p style="color: #999;">画像を選択してください</p>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 右パネル：治療計画 -->
        <div class="right-panel">
            <div class="panel-header">
                <h2>治療計画システム</h2>
            </div>
            
            <!-- タブナビゲーション -->
            <div class="tab-navigation">
                <button class="tab-btn active" onclick="switchMainTab('guide')">治療計画立案ガイド</button>
                <button class="tab-btn" onclick="switchMainTab('plan')">治療計画表</button>
            </div>
            
            <!-- 治療計画立案ガイドタブ -->
            <div id="guide-tab" class="tab-content active">
                <!-- プログレスバー -->
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div class="progress-text" id="progressText">0% 完了</div>
                
                <!-- セクション1：患者背景の評価 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>1. 患者背景の評価</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">現在の患者さんの状態で考慮しておくことはありますか？</div>
                        <div class="guide-checkbox-group">
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="consider-period" onchange="updateProgress()">
                                <div class="guide-checkbox-label">
                                    <label for="consider-period">治療期間の制約あり</label>
                                    <input type="text" class="guide-detail-input" placeholder="詳細を入力">
                                </div>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="consider-age" onchange="updateProgress()">
                                <div class="guide-checkbox-label">
                                    <label for="consider-age">年齢的な配慮必要</label>
                                    <input type="text" class="guide-detail-input" placeholder="詳細を入力">
                                </div>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="consider-medical" onchange="updateProgress()">
                                <div class="guide-checkbox-label">
                                    <label for="consider-medical">全身疾患・既往歴あり</label>
                                    <input type="text" class="guide-detail-input" placeholder="詳細を入力">
                                </div>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="consider-work" onchange="updateProgress()">
                                <div class="guide-checkbox-label">
                                    <label for="consider-work">仕事内容の配慮必要</label>
                                    <input type="text" class="guide-detail-input" placeholder="詳細を入力">
                                </div>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="consider-other" onchange="updateProgress()">
                                <div class="guide-checkbox-label">
                                    <label for="consider-other">その他</label>
                                    <input type="text" class="guide-detail-input" placeholder="詳細を入力">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション2：抜歯適応歯の評価 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>2. 抜歯適応歯の評価</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">現状抜歯が必要な歯は？</div>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('extraction')">歯式選択</button>
                            <div class="selected-teeth-display" id="extraction-teeth">
                                選択された歯が表示されます
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション3：予後不良歯の評価 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>3. 予後不良歯の評価（3年以内）</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">3年以内に歯周病や破折で抜歯になりそうな歯は？</div>
                        <div class="guide-checkbox-group">
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="risk-vital">
                                <label for="risk-vital">失活歯</label>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="risk-apical">
                                <label for="risk-apical">根尖病巣</label>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="risk-crown">
                                <label for="risk-crown">歯冠歯根比不良</label>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="risk-pocket">
                                <label for="risk-pocket">ポケットが深い</label>
                            </div>
                        </div>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('prognosis')">歯式選択</button>
                            <div class="selected-teeth-display" id="prognosis-teeth">
                                選択された歯が表示されます
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション4：咬合平面の評価 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>4. 咬合平面の評価</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">咬合平面のズレを治す部分はあるか？</div>
                        <div class="guide-checkbox-group">
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="occlusal-extrusion">
                                <label for="occlusal-extrusion">挺出している歯がある</label>
                                <button class="btn btn-sm" onclick="openToothSelection('extrusion')" style="margin-left: 10px;">歯式選択</button>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="occlusal-plane">
                                <div class="guide-checkbox-label">
                                    <label for="occlusal-plane">左右の平面がズレている</label>
                                    <input type="text" class="guide-detail-input" placeholder="詳細を入力">
                                </div>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="occlusal-wear">
                                <label for="occlusal-wear">極端に咬耗している</label>
                                <button class="btn btn-sm" onclick="openToothSelection('wear')" style="margin-left: 10px;">歯式選択</button>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="occlusal-tmd">
                                <div class="guide-checkbox-label">
                                    <label for="occlusal-tmd">TMDがある</label>
                                    <input type="text" class="guide-detail-input" placeholder="詳細を入力">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション5：咬合状況の分類 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>5. 咬合状況の分類</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">現在の咬合状況は？</div>
                        <div class="guide-radio-group">
                            <div class="guide-radio-item">
                                <input type="radio" name="occlusion-class" id="class-1" value="1級">
                                <label for="class-1">1級</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="occlusion-class" id="class-2" value="2級">
                                <label for="class-2">2級</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="occlusion-class" id="class-3" value="3級">
                                <label for="class-3">3級</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="occlusion-class" id="class-open" value="オープンバイト">
                                <label for="class-open">オープンバイト</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="occlusion-class" id="class-deep" value="ディープバイト">
                                <label for="class-deep">ディープバイト</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="occlusion-class" id="class-scissors" value="シザーズバイト">
                                <label for="class-scissors">シザーズバイト</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="occlusion-class" id="class-other" value="その他">
                                <label for="class-other">その他</label>
                            </div>
                        </div>
                        <input type="text" class="guide-detail-input" id="occlusion-other-detail" placeholder="その他の場合は詳細を入力" style="margin-top: 10px; display: none;">
                    </div>
                </div>
                
                <!-- セクション6：保険治療での計画 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>6. 保険治療での計画</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">全てを保険治療で治すとしてまず計画</div>
                        
                        <h4>カリエスがある歯は？</h4>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('caries')">歯式選択</button>
                            <div class="selected-teeth-display" id="caries-teeth">
                                選択された歯が表示されます
                            </div>
                            <div style="margin-top: 10px;">
                                <input type="checkbox" id="need-pulpectomy">
                                <label for="need-pulpectomy">抜髄が必要な歯がある</label>
                                <button class="btn btn-sm" onclick="openToothSelection('pulpectomy')" style="margin-left: 10px;">該当歯を選択</button>
                            </div>
                        </div>
                        
                        <h4 style="margin-top: 20px;">不良補綴物は？</h4>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('poor-prosthesis')">歯式選択</button>
                            <div class="selected-teeth-display" id="poor-prosthesis-teeth">
                                選択された歯が表示されます
                            </div>
                        </div>
                        
                        <h4 style="margin-top: 20px;">根管治療が必要な部位</h4>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('endo')">歯式選択</button>
                            <div class="selected-teeth-display" id="endo-teeth">
                                選択された歯が表示されます
                            </div>
                        </div>
                        
                        <h4 style="margin-top: 20px;">欠損がある場合</h4>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('missing')">欠損部位を選択</button>
                            <div class="selected-teeth-display" id="missing-teeth">
                                選択された歯が表示されます
                            </div>
                        </div>
                        
                        <div style="margin-top: 15px; padding: 15px; background-color: #f5f5f5; border-radius: 4px;">
                            <div class="guide-radio-group">
                                <div class="guide-radio-item">
                                    <input type="radio" name="prosthesis-type" id="bridge" value="bridge">
                                    <label for="bridge">ブリッジ</label>
                                </div>
                                <div class="guide-radio-item">
                                    <input type="radio" name="prosthesis-type" id="denture" value="denture">
                                    <label for="denture">義歯</label>
                                </div>
                            </div>
                            
                            <div id="bridge-options" style="display: none; margin-top: 15px;">
                                <div>
                                    <label>支台歯は前後の歯だけで大丈夫か？</label>
                                    <div class="guide-radio-group">
                                        <label><input type="radio" name="abutment-sufficient" value="yes"> はい</label>
                                        <label><input type="radio" name="abutment-sufficient" value="no"> いいえ</label>
                                        <label><input type="radio" name="abutment-sufficient" value="consider"> 要検討</label>
                                    </div>
                                </div>
                                <div style="margin-top: 10px;">
                                    <button class="btn btn-sm" onclick="openToothSelection('additional-abutment')">追加支台歯を選択</button>
                                </div>
                            </div>
                            
                            <div id="denture-options" style="display: none; margin-top: 15px;">
                                <div>
                                    <label>設計メモ：</label>
                                    <textarea class="guide-textarea" placeholder="義歯の設計について記入"></textarea>
                                </div>
                                <div style="margin-top: 10px;">
                                    <button class="btn btn-sm" onclick="openToothSelection('clasp')">鉤歯を選択</button>
                                </div>
                                <div style="margin-top: 10px;">
                                    <label><input type="checkbox" id="clasp-redo"> 鉤歯のやり直しが必要</label>
                                </div>
                                <div style="margin-top: 10px;">
                                    <label><input type="checkbox" id="clasp-splint"> クラスプをかける歯の連結が必要</label>
                                </div>
                                <div style="margin-top: 10px;">
                                    <label>注意事項：</label>
                                    <input type="text" class="guide-detail-input" placeholder="装着感よりも機能を優先など">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション7：矯正治療の検討 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>7. 矯正治療の検討</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">矯正治療を組み入れるか</div>
                        <div class="guide-radio-group">
                            <div class="guide-radio-item">
                                <input type="radio" name="ortho-need" id="ortho-none" value="必要なし">
                                <label for="ortho-none">必要なし</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="ortho-need" id="ortho-no-hope" value="患者希望なし、でも必要">
                                <label for="ortho-no-hope">患者希望なし、でも必要</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="ortho-need" id="ortho-hope" value="患者希望あり">
                                <label for="ortho-hope">患者希望あり</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="ortho-need" id="ortho-must" value="絶対必要">
                                <label for="ortho-must">絶対必要</label>
                            </div>
                        </div>
                        <div style="margin-top: 15px;">
                            <label>矯正ありの場合の変更点：</label>
                            <textarea class="guide-textarea" placeholder="矯正治療を組み入れた場合の治療計画の変更点"></textarea>
                        </div>
                    </div>
                </div>
                
                <!-- セクション8：インプラント計画 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>8. インプラント計画</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">欠損部にインプラントを計画する</div>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('implant-plan')">インプラント埋入予定部位</button>
                            <div class="selected-teeth-display" id="implant-plan-teeth">
                                選択された歯が表示されます
                            </div>
                        </div>
                        
                        <div style="margin-top: 15px;">
                            <h4>インプラント計画の考え方：</h4>
                            <div class="guide-checkbox-group">
                                <div class="guide-checkbox-item">
                                    <input type="checkbox" id="implant-reduce-denture">
                                    <label for="implant-reduce-denture">入れ歯が小さくなる</label>
                                </div>
                                <div class="guide-checkbox-item">
                                    <input type="checkbox" id="implant-no-denture">
                                    <label for="implant-no-denture">入れ歯がなくなる</label>
                                </div>
                                <div class="guide-checkbox-item">
                                    <input type="checkbox" id="implant-with-denture">
                                    <label for="implant-with-denture">インプラント併用義歯</label>
                                </div>
                            </div>
                        </div>
                        
                        <div style="margin-top: 15px;">
                            <h4>段階的計画：</h4>
                            <div style="margin-bottom: 10px;">
                                <label>全て入れた場合：</label>
                                <button class="btn btn-sm" onclick="openToothSelection('implant-all')">歯式選択</button>
                                <input type="number" placeholder="本数" style="width: 80px; margin-left: 10px;">
                            </div>
                            <div style="margin-bottom: 10px;">
                                <label>最小限の場合：</label>
                                <button class="btn btn-sm" onclick="openToothSelection('implant-min')">歯式選択</button>
                                <input type="number" placeholder="本数" style="width: 80px; margin-left: 10px;">
                            </div>
                            <div>
                                <label>推奨プラン：</label>
                                <button class="btn btn-sm" onclick="openToothSelection('implant-recommend')">歯式選択</button>
                                <input type="number" placeholder="本数" style="width: 80px; margin-left: 10px;">
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション9：将来的な追加治療の予測 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>9. 将来的な追加治療の予測</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">今回治療しても数年後にインプラントの追加が入りそうな部位はあるか？</div>
                        <div class="guide-tooth-selection">
                            <button class="guide-tooth-btn" onclick="openToothSelection('future-implant')">歯式選択</button>
                            <div class="selected-teeth-display" id="future-implant-teeth">
                                選択された歯が表示されます
                            </div>
                        </div>
                        <div style="margin-top: 15px;">
                            <label>理由：</label>
                            <textarea class="guide-textarea" placeholder="将来的にインプラントが必要になりそうな理由"></textarea>
                        </div>
                    </div>
                </div>
                
                <!-- セクション10：自費治療オプション -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>10. 自費治療オプション</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <h4>自費の入れ歯の設計や材質を考える</h4>
                        <div class="guide-checkbox-group">
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="metal-base">
                                <label for="metal-base">金属床</label>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="magnet">
                                <label for="magnet">マグネット</label>
                                <button class="btn btn-sm" onclick="openToothSelection('magnet-teeth')" style="margin-left: 10px;">歯式選択</button>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="non-cla
コピー
3行戻って続きを書いてください
Copy                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="non-clasp">
                                <label for="non-clasp">ノンクラスプ</label>
                            </div>
                            <div class="guide-checkbox-item">
                                <input type="checkbox" id="other-denture">
                                <div class="guide-checkbox-label">
                                    <label for="other-denture">その他</label>
                                    <input type="text" class="guide-detail-input" placeholder="その他の自費オプション">
                                </div>
                            </div>
                        </div>
                        
                        <div style="margin-top: 20px;">
                            <h4>保険義歯より自費義歯をやることのメリットは？</h4>
                            <textarea class="guide-textarea" placeholder="患者目線でのメリットを記入"></textarea>
                        </div>
                        
                        <div style="margin-top: 20px;">
                            <h4>自費義歯とインプラント治療だとどちらがメリットありそうか？</h4>
                            <div class="guide-radio-group">
                                <div class="guide-radio-item">
                                    <input type="radio" name="denture-vs-implant" id="prefer-denture" value="自費義歯">
                                    <label for="prefer-denture">自費義歯</label>
                                </div>
                                <div class="guide-radio-item">
                                    <input type="radio" name="denture-vs-implant" id="prefer-implant" value="インプラント">
                                    <label for="prefer-implant">インプラント</label>
                                </div>
                                <div class="guide-radio-item">
                                    <input type="radio" name="denture-vs-implant" id="case-by-case" value="ケースバイケース">
                                    <label for="case-by-case">ケースバイケース</label>
                                </div>
                            </div>
                            <div style="margin-top: 10px;">
                                <label>理由：</label>
                                <textarea class="guide-textarea" placeholder="選択の理由を記入"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション11：長期予後の評価 -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>11. 長期予後の評価</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <h4>5年-10年で心配な部分</h4>
                        <div style="margin-bottom: 15px;">
                            <label>口腔内全体：</label>
                            <textarea class="guide-textarea" placeholder="全体的な懸念事項"></textarea>
                        </div>
                        
                        <div>
                            <label>具体的な心配な歯：</label>
                            <button class="guide-tooth-btn" onclick="openToothSelection('worry-teeth')">歯式選択</button>
                            <div class="selected-teeth-display" id="worry-teeth">
                                選択された歯が表示されます
                            </div>
                            <div style="margin-top: 10px;">
                                <label>各歯の懸念事項：</label>
                                <textarea class="guide-textarea" placeholder="選択した歯それぞれの懸念事項"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- セクション12：患者意欲とコミュニケーション -->
                <div class="accordion">
                    <div class="accordion-header" onclick="toggleAccordion(this)">
                        <span>12. 患者意欲とコミュニケーション</span>
                        <span class="accordion-icon">▼</span>
                    </div>
                    <div class="accordion-content">
                        <div class="guide-question">患者は今回しっかり治したいと思ってますか？</div>
                        <div class="guide-radio-group">
                            <div class="guide-radio-item">
                                <input type="radio" name="patient-motivation" id="very-motivated" value="かなり思ってる">
                                <label for="very-motivated">かなり思ってる</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="patient-motivation" id="somewhat-motivated" value="多少思ってる">
                                <label for="somewhat-motivated">多少思ってる</label>
                            </div>
                            <div class="guide-radio-item">
                                <input type="radio" name="patient-motivation" id="not-motivated" value="あまり思ってない">
                                <label for="not-motivated">あまり思ってない</label>
                            </div>
                        </div>
                        
                        <div style="margin-top: 20px;">
                            <h4>話の導入をどうしますか？</h4>
                            <p style="font-size: 12px; color: #666;">何を冒頭に話をしたら患者さんが感情を動かして、真剣にご自身の歯や治療について向き合うでしょうか。感情を動かしてから理論を説明してください。抜歯部位が主訴ではない時は、抜歯の話は慎重に。</p>
                            <textarea class="guide-textarea" style="min-height: 120px;" placeholder="コミュニケーション戦略を記入"></textarea>
                        </div>
                    </div>
                </div>
                
                <!-- 転記ボタン -->
                <button class="transfer-btn" onclick="transferToTreatmentPlan()">
                    治療計画表に転記する
                </button>
            </div>
            
            <!-- 治療計画表タブ -->
            <div id="plan-tab" class="tab-content">
                <!-- プランタブ -->
                <div class="plan-tabs">
                    <div class="plan-tab ideal active" onclick="switchPlanTab('ideal')">理想プラン</div>
                    <div class="plan-tab standard" onclick="switchPlanTab('standard')">標準プラン</div>
                    <div class="plan-tab insurance" onclick="switchPlanTab('insurance')">保険プラン</div>
                    <button class="add-plan-btn" onclick="addCustomPlan()">+ カスタムプラン追加</button>
                </div>
                
                <!-- 各プランのコンテンツ -->
                <div id="plan-ideal" class="plan-content active">
                    <!-- 歯式選択パレット -->
                    <div class="tooth-palette-container">
                        <div class="current-selection" id="currentSelection-ideal">
                            治療項目を選択してください
                        </div>
                        <div class="tooth-chart">
                            <div class="tooth-chart-grid">
                                <!-- 上顎 -->
                                <button class="tooth-btn" data-position="右上" data-number="8" onclick="selectTooth('右上', 8, 'ideal')">8</button>
                                <button class="tooth-btn" data-position="右上" data-number="7" onclick="selectTooth('右上', 7, 'ideal')">7</button>
                                <button class="tooth-btn" data-position="右上" data-number="6" onclick="selectTooth('右上', 6, 'ideal')">6</button>
                                <button class="tooth-btn" data-position="右上" data-number="5" onclick="selectTooth('右上', 5, 'ideal')">5</button>
                                <button class="tooth-btn" data-position="右上" data-number="4" onclick="selectTooth('右上', 4, 'ideal')">4</button>
                                <button class="tooth-btn" data-position="右上" data-number="3" onclick="selectTooth('右上', 3, 'ideal')">3</button>
                                <button class="tooth-btn" data-position="右上" data-number="2" onclick="selectTooth('右上', 2, 'ideal')">2</button>
                                <button class="tooth-btn" data-position="右上" data-number="1" onclick="selectTooth('右上', 1, 'ideal')">1</button>
                                <button class="tooth-btn" data-position="左上" data-number="1" onclick="selectTooth('左上', 1, 'ideal')">1</button>
                                <button class="tooth-btn" data-position="左上" data-number="2" onclick="selectTooth('左上', 2, 'ideal')">2</button>
                                <button class="tooth-btn" data-position="左上" data-number="3" onclick="selectTooth('左上', 3, 'ideal')">3</button>
                                <button class="tooth-btn" data-position="左上" data-number="4" onclick="selectTooth('左上', 4, 'ideal')">4</button>
                                <button class="tooth-btn" data-position="左上" data-number="5" onclick="selectTooth('左上', 5, 'ideal')">5</button>
                                <button class="tooth-btn" data-position="左上" data-number="6" onclick="selectTooth('左上', 6, 'ideal')">6</button>
                                <button class="tooth-btn" data-position="左上" data-number="7" onclick="selectTooth('左上', 7, 'ideal')">7</button>
                                <button class="tooth-btn" data-position="左上" data-number="8" onclick="selectTooth('左上', 8, 'ideal')">8</button>
                                
                                <!-- 十字線用スペース -->
                                <div class="tooth-divider">
                                    <div class="cross-line-horizontal"></div>
                                    <div class="cross-line-vertical"></div>
                                </div>
                                
                                <!-- 下顎 -->
                                <button class="tooth-btn" data-position="右下" data-number="8" onclick="selectTooth('右下', 8, 'ideal')">8</button>
                                <button class="tooth-btn" data-position="右下" data-number="7" onclick="selectTooth('右下', 7, 'ideal')">7</button>
                                <button class="tooth-btn" data-position="右下" data-number="6" onclick="selectTooth('右下', 6, 'ideal')">6</button>
                                <button class="tooth-btn" data-position="右下" data-number="5" onclick="selectTooth('右下', 5, 'ideal')">5</button>
                                <button class="tooth-btn" data-position="右下" data-number="4" onclick="selectTooth('右下', 4, 'ideal')">4</button>
                                <button class="tooth-btn" data-position="右下" data-number="3" onclick="selectTooth('右下', 3, 'ideal')">3</button>
                                <button class="tooth-btn" data-position="右下" data-number="2" onclick="selectTooth('右下', 2, 'ideal')">2</button>
                                <button class="tooth-btn" data-position="右下" data-number="1" onclick="selectTooth('右下', 1, 'ideal')">1</button>
                                <button class="tooth-btn" data-position="左下" data-number="1" onclick="selectTooth('左下', 1, 'ideal')">1</button>
                                <button class="tooth-btn" data-position="左下" data-number="2" onclick="selectTooth('左下', 2, 'ideal')">2</button>
                                <button class="tooth-btn" data-position="左下" data-number="3" onclick="selectTooth('左下', 3, 'ideal')">3</button>
                                <button class="tooth-btn" data-position="左下" data-number="4" onclick="selectTooth('左下', 4, 'ideal')">4</button>
                                <button class="tooth-btn" data-position="左下" data-number="5" onclick="selectTooth('左下', 5, 'ideal')">5</button>
                                <button class="tooth-btn" data-position="左下" data-number="6" onclick="selectTooth('左下', 6, 'ideal')">6</button>
                                <button class="tooth-btn" data-position="左下" data-number="7" onclick="selectTooth('左下', 7, 'ideal')">7</button>
                                <button class="tooth-btn" data-position="左下" data-number="8" onclick="selectTooth('左下', 8, 'ideal')">8</button>
                            </div>
                        </div>
                        <div style="text-align: center; margin-top: 15px;">
                            <button class="btn btn-danger" onclick="clearCurrentField('ideal')">選択をクリア</button>
                        </div>
                    </div>

                    <!-- 治療計画表 -->
                    <div class="section">
                        <div class="treatment-header">
                            <div class="header-inputs">
                                <div class="header-input">
                                    <label>日付：</label>
                                    <input type="date" id="planDate-ideal" value="">
                                </div>
                                <div class="header-input">
                                    <label>Dr：</label>
                                    <input type="text" id="planDoctorName-ideal" placeholder="医師名">
                                </div>
                                <div class="header-input">
                                    <label>DH：</label>
                                    <input type="text" id="planDhName-ideal" placeholder="歯科衛生士名">
                                </div>
                                <div class="medical-buttons">
                                    <button class="medical-btn" id="btn-soui-ideal" onclick="toggleMedicalBtn('soui', 'ideal')">総医</button>
                                    <button class="medical-btn" id="btn-ikan-ideal" onclick="toggleMedicalBtn('ikan', 'ideal')">医管</button>
                                </div>
                            </div>
                        </div>
                        
                        <table class="treatment-table">
                            <tbody>
                                <tr>
                                    <td width="10%">CR</td>
                                    <td width="15%" class="treatment-field" id="field-CR-ideal" onclick="selectField('CR', 'ideal')"></td>
                                    <td width="10%">SRP</td>
                                    <td width="15%" class="treatment-field" id="field-SRP-ideal" onclick="selectField('SRP', 'ideal')"></td>
                                    <td width="50%" rowspan="9" style="vertical-align: top;">
                                        <div class="remarks-section">
                                            <!-- 患者情報セクション -->
                                            <div class="patient-info-section">
                                                <div>
                                                    <strong>主訴：</strong>
                                                    <textarea id="chiefComplaint-ideal" class="patient-info-input" placeholder="右上の歯が痛い" rows="2"></textarea>
                                                </div>
                                                <div>
                                                    <strong>全身疾患：</strong>
                                                    <textarea id="medicalHistory-ideal" class="patient-info-input" placeholder="高血圧、糖尿病など" rows="2"></textarea>
                                                </div>
                                                <div>
                                                    <strong>服用薬：</strong>
                                                    <textarea id="medications-ideal" class="patient-info-input" placeholder="アムロジピン 5mg 1日1回" rows="2"></textarea>
                                                </div>
                                                <div>
                                                    <strong>注意事項：</strong>
                                                    <textarea id="precautions-ideal" class="patient-info-input" placeholder="アレルギー：ペニシリン" rows="2"></textarea>
                                                </div>
                                            </div>
                                            
                                            <!-- 喫煙 -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">喫煙：</span>
                                                <div class="radio-group">
                                                    <label><input type="radio" name="smoking-ideal" value="無" checked> 無</label>
                                                    <label><input type="radio" name="smoking-ideal" value="有"> 有</label>
                                                    <input type="number" id="smokingAmount-ideal" class="remarks-input" placeholder="本数/日" style="width: 80px; display: none;">
                                                </div>
                                            </div>
                                            
                                            <!-- 咬合 -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">咬合：</span>
                                                <input type="text" id="occlusion-ideal" class="remarks-input" placeholder="咬合状態を入力">
                                            </div>
                                            
                                            <!-- Brx -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">Brx：</span>
                                                <div class="select-group">
                                                    <button class="select-btn" data-field="brx" data-value="低" onclick="selectOption('brx', '低', 'ideal')">低</button>
                                                    <button class="select-btn" data-field="brx" data-value="高" onclick="selectOption('brx', '高', 'ideal')">高</button>
                                                </div>
                                            </div>
                                            
                                            <!-- NG -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">NG：</span>
                                                <div class="select-group">
                                                    <button class="select-btn" data-field="ng" data-value="有" onclick="selectOption('ng', '有', 'ideal')">有</button>
                                                    <button class="select-btn" data-field="ng" data-value="無" onclick="selectOption('ng', '無', 'ideal')">無</button>
                                                </div>
                                            </div>
                                            
                                            <!-- P -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">P：</span>
                                                <div class="select-group">
                                                    <button class="select-btn" data-field="p" data-value="軽度" onclick="selectOption('p', '軽度', 'ideal')">軽度</button>
                                                    <button class="select-btn" data-field="p" data-value="中等度" onclick="selectOption('p', '中等度', 'ideal')">中等度</button>
                                                    <button class="select-btn" data-field="p" data-value="重度" onclick="selectOption('p', '重度', 'ideal')">重度</button>
                                                </div>
                                            </div>
                                            
                                            <!-- C -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">C：</span>
                                                <div class="select-group">
                                                    <button class="select-btn" data-field="c" data-value="低い" onclick="selectOption('c', '低い', 'ideal')">低い</button>
                                                    <button class="select-btn" data-field="c" data-value="高い" onclick="selectOption('c', '高い', 'ideal')">高い</button>
                                                </div>
                                            </div>
                                            
                                            <!-- ortho -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">ortho：</span>
                                                <div class="select-group">
                                                    <button class="select-btn" data-field="ortho" data-value="不要" onclick="selectOption('ortho', '不要', 'ideal')">不要</button>
                                                    <button class="select-btn" data-field="ortho" data-value="説明済" onclick="selectOption('ortho', '説明済', 'ideal')">説明済</button>
                                                    <button class="select-btn" data-field="ortho" data-value="紹介" onclick="selectOption('ortho', '紹介', 'ideal')">紹介</button>
                                                    <button class="select-btn" data-field="ortho" data-value="当院" onclick="selectOption('ortho', '当院', 'ideal')">当院</button>
                                                </div>
                                            </div>
                                            
                                            <!-- implantとHys -->
                                            <div class="special-treatments">
                                                <div class="special-treatment-item">
                                                    <div class="special-treatment-label">implant</div>
                                                    <div class="treatment-field" id="field-implant-ideal" onclick="selectField('implant', 'ideal')" style="min-height: 40px;"></div>
                                                </div>
                                                <div class="special-treatment-item">
                                                    <div class="special-treatment-label">Hys</div>
                                                    <div class="treatment-field" id="field-Hys-ideal" onclick="selectField('Hys', 'ideal')" style="min-height: 40px;"></div>
                                                </div>
                                            </div>
                                            
                                            <!-- Clear tools -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">Clear tools：</span>
                                                <textarea id="clearTools-ideal" class="remarks-input multi-line-input" rows="2" placeholder="清掃器具を入力"></textarea>
                                            </div>
                                            
                                            <!-- OHI方針 -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">OHI方針：</span>
                                                <textarea id="ohiPolicy-ideal" class="remarks-input multi-line-input" rows="2" placeholder="口腔衛生指導方針を入力"></textarea>
                                            </div>
                                            
                                            <!-- 備考 -->
                                            <div class="remarks-row">
                                                <span class="remarks-label">備考：</span>
                                                <textarea id="remarksNotes-ideal" class="remarks-input" rows="2" placeholder="その他備考"></textarea>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                <tr>
                                    <td>MTA</td>
                                    <td class="treatment-field" id="field-MTA-ideal" onclick="selectField('MTA', 'ideal')"></td>
                                    <td>EXT</td>
                                    <td class="treatment-field" id="field-EXT-ideal" onclick="selectField('EXT', 'ideal')"></td>
                                </tr>
                                <tr>
                                    <td class="treatment-cell long-text">エクストルージョン</td>
                                    <td class="treatment-field" id="field-エクストルージョン-ideal" onclick="selectField('エクストルージョン', 'ideal')"></td>
                                    <td class="treatment-cell long-text">クラウンレングス</td>
                                    <td class="treatment-field" id="field-クラウンレングス-ideal" onclick="selectField('クラウンレングス', 'ideal')"></td>
                                </tr>
                                <tr>
                                    <td>IN</td>
                                    <td class="treatment-field" id="field-IN-ideal" onclick="selectField('IN', 'ideal')"></td>
                                    <td>ソケプリ</td>
                                    <td class="treatment-field" id="field-ソケプリ-ideal" onclick="selectField('ソケプリ', 'ideal')"></td>
                                </tr>
                                <tr>
                                    <td>ENDO</td>
                                    <td class="treatment-field" id="field-ENDO-ideal" onclick="selectField('ENDO', 'ideal')"></td>
                                    <td>インプラント</td>
                                    <td class="treatment-field" id="field-インプラント-ideal" onclick="selectField('インプラント', 'ideal')"></td>
                                </tr>
                                <tr>
                                    <td>Cr</td>
                                    <td class="treatment-field" id="field-Cr-ideal" onclick="selectField('Cr', 'ideal')"></td>
                                    <td>再生療法</td>
                                    <td class="treatment-field" id="field-再生療法-ideal" onclick="selectField('再生療法', 'ideal')"></td>
                                </tr>
                                <tr>
                                    <td>Br</td>
                                    <td class="treatment-field" id="field-Br-ideal" onclick="selectField('Br', 'ideal')"></td>
                                    <td><input type="text" id="customRow7-ideal" class="custom-field-input" placeholder="項目名を入力"></td>
                                    <td class="treatment-field" id="field-customRow7-ideal" onclick="selectField('customRow7', 'ideal')"></td>
                                </tr>
                                <tr>
                                    <td>OBS</td>
                                    <td class="treatment-field" id="field-OBS-ideal" onclick="selectField('OBS', 'ideal')"></td>
                                    <td><input type="text" id="customRow8-ideal" class="custom-field-input" placeholder="項目名を入力"></td>
                                    <td class="treatment-field" id="field-customRow8-ideal" onclick="selectField('customRow8', 'ideal')"></td>
                                </tr>
                                <tr>
                                    <td>自由記入欄</td>
                                    <td><textarea id="freeText-ideal" class="free-text-area" placeholder="自由記入欄"></textarea></td>
                                    <td>NG</td>
                                    <td><textarea id="ngText-ideal" class="ng-text-input" placeholder="NGの詳細を入力" rows="2"></textarea></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- 治療順序 -->
                    <div class="section">
                        <h3>治療順序</h3>
                        <div class="treatment-order-container">
                            <div class="auto-generate-section">
                                <p style="margin: 0 0 10px 0;">治療計画から自動的に治療順序を生成します</p>
                                <button class="auto-generate-btn" onclick="autoGenerateTreatmentOrder('ideal')">
                                    <span>🔄</span>
                                    <span>治療順序を自動生成</span>
                                </button>
                            </div>
                            <div id="treatmentOrderList-ideal">
                                <!-- 動的に生成される -->
                            </div>
                            <button class="add-order-btn" onclick="addTreatmentOrder('ideal')">+ 治療順序を追加</button>
                        </div>
                    </div>
                </div>
                
                <!-- 標準プラン・保険プランのコンテンツ（構造は理想プランと同じ） -->
                <div id="plan-standard" class="plan-content" style="display: none;">
                    <!-- 理想プランと同じ構造をplan-standardのIDで実装 -->
                </div>
                
                <div id="plan-insurance" class="plan-content" style="display: none;">
                    <!-- 理想プランと同じ構造をplan-insuranceのIDで実装 -->
                </div>
            </div>
        </div>
    </div>

    <!-- 歯式選択モーダル -->
    <div id="toothSelectionModal" class="tooth-selection-modal">
        <div class="tooth-selection-content">
            <div class="tooth-selection-header">
                <h3 class="tooth-selection-title" id="toothSelectionTitle">歯式選択</h3>
                <span class="close" onclick="closeToothSelection()">&times;</span>
            </div>
                  <div class="tooth-chart">
                <div class="tooth-chart-grid">
                    <!-- 上顎 -->
                    <button class="tooth-btn" data-position="右上" data-number="8" onclick="selectToothInModal('右上', 8)">8</button>
                    <button class="tooth-btn" data-position="右上" data-number="7" onclick="selectToothInModal('右上', 7)">7</button>
                    <button class="tooth-btn" data-position="右上" data-number="6" onclick="selectToothInModal('右上', 6)">6</button>
                    <button class="tooth-btn" data-position="右上" data-number="5" onclick="selectToothInModal('右上', 5)">5</button>
                    <button class="tooth-btn" data-position="右上" data-number="4" onclick="selectToothInModal('右上', 4)">4</button>
                    <button class="tooth-btn" data-position="右上" data-number="3" onclick="selectToothInModal('右上', 3)">3</button>
                    <button class="tooth-btn" data-position="右上" data-number="2" onclick="selectToothInModal('右上', 2)">2</button>
                    <button class="tooth-btn" data-position="右上" data-number="1" onclick="selectToothInModal('右上', 1)">1</button>
                    <button class="tooth-btn" data-position="左上" data-number="1" onclick="selectToothInModal('左上', 1)">1</button>
                    <button class="tooth-btn" data-position="左上" data-number="2" onclick="selectToothInModal('左上', 2)">2</button>
                    <button class="tooth-btn" data-position="左上" data-number="3" onclick="selectToothInModal('左上', 3)">3</button>
                    <button class="tooth-btn" data-position="左上" data-number="4" onclick="selectToothInModal('左上', 4)">4</button>
                    <button class="tooth-btn" data-position="左上" data-number="5" onclick="selectToothInModal('左上', 5)">5</button>
                    <button class="tooth-btn" data-position="左上" data-number="6" onclick="selectToothInModal('左上', 6)">6</button>
                    <button class="tooth-btn" data-position="左上" data-number="7" onclick="selectToothInModal('左上', 7)">7</button>
                    <button class="tooth-btn" data-position="左上" data-number="8" onclick="selectToothInModal('左上', 8)">8</button>
                    
                    <!-- 十字線用スペース -->
                    <div class="tooth-divider">
                        <div class="cross-line-horizontal"></div>
                        <div class="cross-line-vertical"></div>
                    </div>
                    
                    <!-- 下顎 -->
                    <button class="tooth-btn" data-position="右下" data-number="8" onclick="selectToothInModal('右下', 8)">8</button>
                    <button class="tooth-btn" data-position="右下" data-number="7" onclick="selectToothInModal('右下', 7)">7</button>
                    <button class="tooth-btn" data-position="右下" data-number="6" onclick="selectToothInModal('右下', 6)">6</button>
                    <button class="tooth-btn" data-position="右下" data-number="5" onclick="selectToothInModal('右下', 5)">5</button>
                    <button class="tooth-btn" data-position="右下" data-number="4" onclick="selectToothInModal('右下', 4)">4</button>
                    <button class="tooth-btn" data-position="右下" data-number="3" onclick="selectToothInModal('右下', 3)">3</button>
                    <button class="tooth-btn" data-position="右下" data-number="2" onclick="selectToothInModal('右下', 2)">2</button>
                    <button class="tooth-btn" data-position="右下" data-number="1" onclick="selectToothInModal('右下', 1)">1</button>
                    <button class="tooth-btn" data-position="左下" data-number="1" onclick="selectToothInModal('左下', 1)">1</button>
                    <button class="tooth-btn" data-position="左下" data-number="2" onclick="selectToothInModal('左下', 2)">2</button>
                    <button class="tooth-btn" data-position="左下" data-number="3" onclick="selectToothInModal('左下', 3)">3</button>
                    <button class="tooth-btn" data-position="左下" data-number="4" onclick="selectToothInModal('左下', 4)">4</button>
                    <button class="tooth-btn" data-position="左下" data-number="5" onclick="selectToothInModal('左下', 5)">5</button>
                    <button class="tooth-btn" data-position="左下" data-number="6" onclick="selectToothInModal('左下', 6)">6</button>
                    <button class="tooth-btn" data-position="左下" data-number="7" onclick="selectToothInModal('左下', 7)">7</button>
                    <button class="tooth-btn" data-position="左下" data-number="8" onclick="selectToothInModal('左下', 8)">8</button>
                </div>
            </div>
            <div class="selected-teeth-display" id="modalSelectedTeeth" style="margin-top: 20px;">
                選択された歯が表示されます
            </div>
            <div class="tooth-selection-buttons">
                <button class="btn btn-danger" onclick="clearModalSelection()">選択をクリア</button>
                <button class="btn btn-primary" onclick="confirmToothSelection()">確定</button>
            </div>
        </div>
    </div>

    <!-- アクションバー -->
    <div class="action-bar">
        <button class="btn btn-primary" onclick="saveData()">一時保存</button>
        <button class="btn btn-secondary" onclick="showLoadModal()">保存データ読込</button>
        <button class="btn btn-success" onclick="generatePDF()">PDF作成（全体）</button>
        <button class="btn btn-info" onclick="generateTreatmentOnlyPDF()">PDF作成（治療計画のみ）</button>
        <button class="btn btn-warning" onclick="generateComparisonPDF()">プラン比較PDF</button>
        <button class="btn btn-danger" onclick="clearAll()">すべてクリア</button>
    </div>

    <!-- ローディング表示 -->
    <div id="loading" class="loading" style="display: none;">
        <div class="spinner"></div>
        <p>処理中...</p>
    </div>

    <!-- 読み込みモーダル -->
    <div id="loadModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeLoadModal()">&times;</span>
            <h2>保存済みデータ</h2>
            <div id="fileList">
                <!-- 動的に生成される -->
            </div>
        </div>
    </div>
     
    <script>
        // グローバル変数
        let activeField = null;
        let activePlan = 'ideal';
        let selectedTeeth = {
            ideal: {},
            standard: {},
            insurance: {}
        };
        let uploadedImages = {};
        let imageTransforms = {};
        let treatmentOrderCounter = {
            ideal: 0,
            standard: 0,
            insurance: 0
        };
        let medicalManagement = {
            ideal: [],
            standard: [],
            insurance: []
        };
        let remarksData = {
            ideal: {},
            standard: {},
            insurance: {}
        };
        let currentViewMode = 'single';
        let customFields = {
            ideal: {},
            standard: {},
            insurance: {}
        };
        let draggedThumbnail = null;
        let customPlanCounter = 0;
        
        // 治療計画立案ガイドのデータ
        let planningGuideData = {
            patientBackground: {},
            extractionTeeth: [],
            prognosisTeeth: [],
            occlusionIssues: {},
            occlusionClass: '',
            insurancePlan: {},
            orthodontics: {},
            implantPlan: {},
            futureRisk: {},
            selfPayOptions: {},
            longTermPrognosis: {},
            patientCommunication: {}
        };
        
        // 歯式選択モーダル用
        let currentToothSelectionType = '';
        let modalSelectedTeeth = [];

        // 治療項目のリスト
        const treatmentOptions = [
            'CR', 'MTA', 'IN', 'ENDO', 'エクストルージョン', 'クラウンレングス', 
            'Cr', 'Br', 'OBS', 'SRP', 'EXT', 'ソケプリ', 'インプラント', 
            '再生療法', 'NG', 'implant', 'Hys', 'メンテナンス', 'TBI', 'SC', 'PMTC'
        ];

        // 治療優先度マッピング
        const treatmentPriority = {
            'EXT': 1,
            'ENDO': 2,
            'MTA': 3,
            'SRP': 4,
            'CR': 5,
            'IN': 5,
            'Cr': 6,
            'Br': 7,
            'インプラント': 8,
            '再生療法': 4,
            'エクストルージョン': 3,
            'クラウンレングス': 3,
            'ソケプリ': 2,
            'OBS': 9,
            'NG': 9,
            'implant': 8,
            'Hys': 10
        };

        // 初期化
        document.addEventListener('DOMContentLoaded', function() {
            initializeSplitPane();
            initializeDragAndDrop();
            initializeSmokingToggle();
            initializeTextareaAutoResize();
            initializeCustomFields();
            initializeAdvancedToothSelection();
            initializeImageDragAndDrop();
            initializeGalleryDragAndDrop();
            initializeAccordions();
            initializeGuideEventListeners();
            
            // 各プランに治療順序を追加
            ['ideal', 'standard', 'insurance'].forEach(plan => {
                addTreatmentOrder(plan);
            });
            
            // 日付の初期値を今日に設定
            const today = new Date().toISOString().split('T')[0];
            ['ideal', 'standard', 'insurance'].forEach(plan => {
                const dateInput = document.getElementById(`planDate-${plan}`);
                if (dateInput) {
                    dateInput.value = today;
                }
            });
        });

        // アコーディオンの初期化
        function initializeAccordions() {
            const headers = document.querySelectorAll('.accordion-header');
            headers.forEach(header => {
                header.addEventListener('click', () => toggleAccordion(header));
            });
        }

        // アコーディオンのトグル
        function toggleAccordion(header) {
            const content = header.nextElementSibling;
            const icon = header.querySelector('.accordion-icon');
            
            header.classList.toggle('active');
            content.classList.toggle('active');
            
            updateProgress();
        }

        // 進捗の更新
        function updateProgress() {
            const totalSections = 12;
            let completedSections = 0;
            
            // 各セクションの完了状態をチェック
            const accordions = document.querySelectorAll('.accordion');
            accordions.forEach(accordion => {
                const content = accordion.querySelector('.accordion-content');
                const hasInput = content.querySelector('input:checked, textarea:not(:placeholder-shown), .selected-teeth-display:not(:empty)');
                if (hasInput) {
                    completedSections++;
                }
            });
            
            const progress = Math.round((completedSections / totalSections) * 100);
            document.getElementById('progressFill').style.width = progress + '%';
            document.getElementById('progressText').textContent = `${progress}% 完了`;
        }

        // ガイドのイベントリスナー初期化
        function initializeGuideEventListeners() {
            // 咬合分類のその他選択時
            document.getElementById('class-other').addEventListener('change', function() {
                const otherDetail = document.getElementById('occlusion-other-detail');
                otherDetail.style.display = this.checked ? 'block' : 'none';
            });
            
            // 補綴タイプの選択時
            document.querySelectorAll('input[name="prosthesis-type"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    document.getElementById('bridge-options').style.display = 
                        this.value === 'bridge' ? 'block' : 'none';
                    document.getElementById('denture-options').style.display = 
                        this.value === 'denture' ? 'block' : 'none';
                });
            });
        }

        // メインタブの切り替え
        function switchMainTab(tab) {
            // タブボタンの更新
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // タブコンテンツの更新
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(`${tab}-tab`).classList.add('active');
        }

        // プランタブの切り替え
        function switchPlanTab(plan) {
            activePlan = plan;
            
            // タブの更新
            document.querySelectorAll('.plan-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // コンテンツの更新
            document.querySelectorAll('.plan-content').forEach(content => {
                content.style.display = 'none';
            });
            document.getElementById(`plan-${plan}`).style.display = 'block';
        }

        // カスタムプランの追加
        function addCustomPlan() {
            customPlanCounter++;
            const planId = `custom${customPlanCounter}`;
            
            // タブの追加
            const tabContainer = document.querySelector('.plan-tabs');
            const newTab = document.createElement('div');
            newTab.className = 'plan-tab custom';
            newTab.textContent = `カスタム${customPlanCounter}`;
            newTab.onclick = () => switchPlanTab(planId);
            tabContainer.insertBefore(newTab, tabContainer.lastElementChild);
            
            // データ構造の初期化
            selectedTeeth[planId] = {};
            treatmentOrderCounter[planId] = 0;
            medicalManagement[planId] = [];
            remarksData[planId] = {};
            customFields[planId] = {};
            
            // コンテンツの作成（理想プランをコピー）
            const idealContent = document.getElementById('plan-ideal');
            const newContent = idealContent.cloneNode(true);
            newContent.id = `plan-${planId}`;
            newContent.style.display = 'none';
            
            // ID属性の更新
            updateElementIds(newContent, 'ideal', planId);
            
            // 親要素に追加
            document.getElementById('plan-tab').appendChild(newContent);
            
            // 新しいプランに切り替え
            switchPlanTab(planId);
        }

        // 要素のIDを更新
        function updateElementIds(element, oldPlan, newPlan) {
            // 自身のIDを更新
            if (element.id && element.id.includes(oldPlan)) {
                element.id = element.id.replace(oldPlan, newPlan);
            }
            
            // onclick属性を更新
            if (element.onclick) {
                const onclickStr = element.onclick.toString();
                element.onclick = new Function(onclickStr.replace(new RegExp(oldPlan, 'g'), newPlan));
            }
            
            // 子要素を再帰的に更新
            Array.from(element.children).forEach(child => {
                updateElementIds(child, oldPlan, newPlan);
            });
        }

        // 歯式選択モーダルを開く
        function openToothSelection(type) {
            currentToothSelectionType = type;
            modalSelectedTeeth = [];
            
            // タイトルを設定
            const titles = {
                'extraction': '抜歯が必要な歯',
                'prognosis': '予後不良歯（3年以内）',
                'extrusion': '挺出している歯',
                'wear': '極端に咬耗している歯',
                'caries': 'カリエスがある歯',
                'pulpectomy': '抜髄が必要な歯',
                'poor-prosthesis': '不良補綴物',
                'endo': '根管治療が必要な部位',
                'missing': '欠損部位',
                'additional-abutment': '追加支台歯',
                'clasp': '鉤歯',
                'implant-plan': 'インプラント埋入予定部位',
                'implant-all': '全て入れた場合',
                'implant-min': '最小限の場合',
                'implant-recommend': '推奨プラン',
                'future-implant': '将来インプラントが必要になりそうな部位',
                'magnet-teeth': 'マグネット設置歯',
                'worry-teeth': '5-10年で心配な歯'
            };
            
            document.getElementById('toothSelectionTitle').textContent = titles[type] || '歯式選択';
            
            // 既存の選択を復元
            if (planningGuideData[type]) {
                modalSelectedTeeth = [...planningGuideData[type]];
            }
            
            updateModalToothDisplay();
            document.getElementById('toothSelectionModal').style.display = 'block';
        }

        // モーダル内での歯の選択
        function selectToothInModal(position, number) {
            const index = modalSelectedTeeth.findIndex(t => 
                t.position === position && t.number === number
            );
            
            if (index > -1) {
                modalSelectedTeeth.splice(index, 1);
            } else {
                modalSelectedTeeth.push({ position, number });
            }
            
            updateModalToothDisplay();
        }

        // モーダル内の表示更新
        function updateModalToothDisplay() {
            // ボタンの状態更新
            document.querySelectorAll('#toothSelectionModal .tooth-btn').forEach(btn => {
                btn.classList.remove('selected');
            });
            
            modalSelectedTeeth.forEach(tooth => {
                const btn = document.querySelector(`#toothSelectionModal .tooth-btn[data-position="${tooth.position}"][data-number="${tooth.number}"]`);
                if (btn) btn.classList.add('selected');
            });
            
            // 選択表示の更新
            const display = document.getElementById('modalSelectedTeeth');
            if (modalSelectedTeeth.length === 0) {
                display.textContent = '選択された歯が表示されます';
            } else {
                display.innerHTML = modalSelectedTeeth.map(tooth => 
                    `<span class="tooth-item">${tooth.position}${tooth.number}</span>`
                ).join('');
            }
        }

        // モーダルの選択をクリア
        function clearModalSelection() {
            modalSelectedTeeth = [];
            updateModalToothDisplay();
        }

        // 歯式選択を確定
        function confirmToothSelection() {
            planningGuideData[currentToothSelectionType] = [...modalSelectedTeeth];
            
            // 表示を更新
            const displayId = `${currentToothSelectionType}-teeth`;
            const displayElement = document.getElementById(displayId);
            if (displayElement) {
                if (modalSelectedTeeth.length === 0) {
                    displayElement.textContent = '選択された歯が表示されます';
                } else {
                    displayElement.innerHTML = modalSelectedTeeth.map(tooth => 
                        `<span class="tooth-item">${tooth.position}${tooth.number}</span>`
                    ).join('');
                }
            }
            
            closeToothSelection();
            updateProgress();
        }

        // 歯式選択モーダルを閉じる
        function closeToothSelection() {
            document.getElementById('toothSelectionModal').style.display = 'none';
        }

        // 治療計画への転記
        function transferToTreatmentPlan() {
            if (!confirm('立案ガイドの内容を治療計画表に転記しますか？\n対象プラン: ' + getPlanDisplayName(activePlan))) {
                return;
            }
            
            // 抜歯適応歯 → EXT
            if (planningGuideData.extraction && planningGuideData.extraction.length > 0) {
                selectedTeeth[activePlan]['EXT'] = [...planningGuideData.extraction];
                updateFieldDisplay('EXT', activePlan);
            }
            
            // カリエス → CR
            if (planningGuideData.caries && planningGuideData.caries.length > 0) {
                selectedTeeth[activePlan]['CR'] = [...planningGuideData.caries];
                updateFieldDisplay('CR', activePlan);
            }
            
            // 根管治療 → ENDO
            if (planningGuideData.endo && planningGuideData.endo.length > 0) {
                selectedTeeth[activePlan]['ENDO'] = [...planningGuideData.endo];
                updateFieldDisplay('ENDO', activePlan);
            }
            
            // インプラント計画 → インプラント
            if (planningGuideData['implant-recommend'] && planningGuideData['implant-recommend'].length > 0) {
                selectedTeeth[activePlan]['インプラント'] = [...planningGuideData['implant-recommend']];
                updateFieldDisplay('インプラント', activePlan);
            }
            
            // 患者情報の転記
            const patientName = document.getElementById('patientName').value;
            const patientId = document.getElementById('patientId').value;
            
            // 主訴等の転記（最初のプランの場合のみ）
            if (activePlan === 'ideal') {
                // 患者背景情報を備考欄に転記
                let notes = '';
                const backgrounds = document.querySelectorAll('.guide-checkbox-item input:checked');
                backgrounds.forEach(checkbox => {
                    const label = checkbox.nextElementSibling.textContent;
                    const detail = checkbox.parentElement.querySelector('.guide-detail-input');
                    if (detail && detail.value) {
                        notes += `${label}: ${detail.value}\n`;
                    }
                });
                
                if (notes) {
                    document.getElementById(`remarksNotes-${activePlan}`).value = notes;
                }
            }
            
            alert('治療計画表への転記が完了しました');
            switchMainTab('plan');
        }

        // プラン表示名の取得
        function getPlanDisplayName(planKey) {
            const names = {
                'ideal': '理想プラン',
                'standard': '標準プラン',
                'insurance': '保険プラン'
            };
            return names[planKey] || `カスタムプラン${planKey.replace('custom', '')}`;
        }

        // 画像のドラッグ&ドロップ（サムネイル間）
        function initializeImageDragAndDrop() {
            const thumbnails = document.querySelectorAll('.thumbnail');
            thumbnails.forEach(thumbnail => {
                thumbnail.addEventListener('dragstart', handleImageDragStart);
                thumbnail.addEventListener('dragend', handleImageDragEnd);
                thumbnail.addEventListener('dragover', handleImageDragOver);
                thumbnail.addEventListener('drop', handleImageDrop);
                thumbnail.addEventListener('dragleave', handleImageDragLeave);
            });
        }

        // 画像ドラッグ開始
        function handleImageDragStart(e) {
            if (!this.classList.contains('has-image')) {
                e.preventDefault();
                return;
            }
            
            draggedThumbnail = this;
            this.classList.add('dragging');
            e.dataTransfer.effectAllowed = 'move';
            
            const img = this.querySelector('img');
            if (img) {
                e.dataTransfer.setData('text/plain', img.src);
            }
        }

        // 画像ドラッグ終了
        function handleImageDragEnd(e) {
            this.classList.remove('dragging');
            draggedThumbnail = null;
            
            document.querySelectorAll('.thumbnail.drag-over').forEach(thumb => {
                thumb.classList.remove('drag-over');
            });
        }

        // 画像ドラッグオーバー
        function handleImageDragOver(e) {
            if (e.preventDefault) {
                e.preventDefault();
            }
            
            e.dataTransfer.dropEffect = 'move';
            
            if (draggedThumbnail && draggedThumbnail !== this) {
                this.classList.add('drag-over');
            }
            
            return false;
        }

        // 画像ドラッグリーブ
        function handleImageDragLeave(e) {
            this.classList.remove('drag-over');
        }

        // 画像ドロップ（サムネイル間の入れ替え）
        function handleImageDrop(e) {
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            
            this.classList.remove('drag-over');
            
            if (draggedThumbnail && draggedThumbnail !== this) {
                swapImages(draggedThumbnail, this);
            }
            
            return false;
        }

        // 画像を入れ替える
        function swapImages(source, target) {
            const sourceImg = source.querySelector('img');
            const targetImg = target.querySelector('img');
            
            const sourceType = source.dataset.type;
            const sourcePosition = source.dataset.position;
            const targetType = target.dataset.type;
            const targetPosition = target.dataset.position;
            
            const tempImageData = uploadedImages[sourceType]?.[sourcePosition];
            const tempTransform = imageTransforms[`${sourceType}-${sourcePosition}`];
            
            if (targetImg) {
                uploadedImages[sourceType][sourcePosition] = uploadedImages[targetType][targetPosition];
                imageTransforms[`${sourceType}-${sourcePosition}`] = imageTransforms[`${targetType}-${targetPosition}`];
            } else {
                if (uploadedImages[sourceType]) {
                    delete uploadedImages[sourceType][sourcePosition];
                }
                delete imageTransforms[`${sourceType}-${sourcePosition}`];
            }
            
            if (tempImageData) {
                if (!uploadedImages[targetType]) {
                    uploadedImages[targetType] = {};
                }
                uploadedImages[targetType][targetPosition] = tempImageData;
                if (tempTransform) {
                    imageTransforms[`${targetType}-${targetPosition}`] = tempTransform;
                }
            } else {
                if (uploadedImages[targetType]) {
                    delete uploadedImages[targetType][targetPosition];
                }
                delete imageTransforms[`${targetType}-${targetPosition}`];
            }
            
            if (sourceImg && targetImg) {
                const tempSrc = sourceImg.src;
                sourceImg.src = targetImg.src;
                targetImg.src = tempSrc;
                
                applyImageTransform(sourceImg, `${sourceType}-${sourcePosition}`);
                applyImageTransform(targetImg, `${targetType}-${targetPosition}`);
            } else if (sourceImg && !targetImg) {
                source.removeChild(sourceImg);
                source.classList.remove('has-image');
                
                const newImg = document.createElement('img');
                newImg.src = sourceImg.src;
                target.appendChild(newImg);
                target.classList.add('has-image');
                
                if (imageTransforms[`${targetType}-${targetPosition}`]) {
                    applyImageTransform(newImg, `${targetType}-${targetPosition}`);
                }
            }
            
            if (currentViewMode === 'split') {
                updateSplitView();
            }
        }

        // ギャラリーセクションへの複数画像ドロップ
        function initializeGalleryDragAndDrop() {
            const gallerySections = document.querySelectorAll('.gallery-section[data-section-type]');
            
            gallerySections.forEach(section => {
                section.addEventListener('dragover', handleGalleryDragOver);
                section.addEventListener('drop', handleGalleryDrop);
                section.addEventListener('dragleave', handleGalleryDragLeave);
            });
        }

        // ギャラリーへのドラッグオーバー
        function handleGalleryDragOver(e) {
            e.preventDefault();
            
            if (!draggedThumbnail) {
                this.classList.add('drag-over');
            }
        }

        // ギャラリーからのドラッグリーブ
        function handleGalleryDragLeave(e) {
            if (!this.contains(e.relatedTarget)) {
                this.classList.remove('drag-over');
            }
        }

        // ギャラリーへのドロップ（複数画像対応）
        function handleGalleryDrop(e) {
            e.preventDefault();
            this.classList.remove('drag-over');
            
            if (draggedThumbnail) {
                return;
            }
            
            const files = e.dataTransfer.files;
            if (files.length === 0) return;
            
            const sectionType = this.dataset.sectionType;
            const maxImages = parseInt(this.dataset.maxImages) || 999;
            
            const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
            
            if (imageFiles.length === 0) {
                alert('画像ファイルを選択してください');
                return;
            }
            
            if (imageFiles.length > maxImages) {
                alert(`最大${maxImages}枚まで選択できます`);
                return;
            }
            
            let thumbnails = [];
            if (sectionType === 'intraoral') {
                thumbnails = Array.from(this.querySelectorAll('.thumbnail[data-type="intraoral"]'));
            } else if (sectionType === 'dental10') {
                thumbnails = Array.from(this.querySelectorAll('.thumbnail[data-type="xray"][data-position^="10-"]'));
            }
            
            const emptyThumbnails = thumbnails.filter(thumb => !thumb.classList.contains('has-image'));
            
            imageFiles.forEach((file, index) => {
                if (index < emptyThumbnails.length) {
                    handleImageUpload(file, emptyThumbnails[index]);
                }
            });
            
            if (imageFiles.length > emptyThumbnails.length) {
                const unplacedCount = imageFiles.length - emptyThumbnails.length;
                alert(`${unplacedCount}枚の画像は空きスペースがないため配置できませんでした`);
            }
        }

        // カスタムフィールドの初期化
        function initializeCustomFields() {
            ['ideal', 'standard', 'insurance'].forEach(plan => {
                const row7Input = document.getElementById(`customRow7-${plan}`);
                const row8Input = document.getElementById(`customRow8-${plan}`);
                
                if (row7Input) {
                    row7Input.addEventListener('input', function() {
                        customFields[plan].row7Right = this.value;
                    });
                }
                
                if (row8Input) {
                    row8Input.addEventListener('input', function() {
                        customFields[plan].row8Right = this.value;
                    });
                }
            });
        }

        // テキストエリアの自動リサイズ
        function initializeTextareaAutoResize() {
            const textareas = document.querySelectorAll('.patient-info-input, .free-text-area, .multi-line-input, .ng-text-input, .guide-textarea');
            textareas.forEach(textarea => {
                textarea.addEventListener('input', function() {
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                });
            });
        }

        // 一括アップロード機能
        function bulkUploadIntraoral() {
            const input = document.createElement('input');
            input.type = 'file';
            input.multiple = true;
            input.accept = 'image/*';
            
            input.onchange = (event) => {
                const files = Array.from(event.target.files);
                if (files.length > 5) {
                    alert('5枚まで選択してください');
                    return;
                }
                
                const positions = ['upper', 'right', 'front', 'left', 'lower'];
                files.forEach((file, index) => {
                    if (index < positions.length) {
                        const thumbnail = document.querySelector(`[data-type="intraoral"][data-position="${positions[index]}"]`);
                        if (thumbnail) {
                            handleImageUpload(file, thumbnail);
                        }
                    }
                });
            };
            
            input.click();
        }

        function bulkUploadDental10() {
            const input = document.createElement('input');
            input.type = 'file';
            input.multiple = true;
            input.accept = 'image/*';
            
            input.onchange = (event) => {
                const files = Array.from(event.target.files);
                if (files.length > 10) {
                    alert('10枚まで選択してください');
                    return;
                }
                
                files.forEach((file, index) => {
                    if (index < 10) {
                        const position = `10-${index + 1}`;
                        const thumbnail = document.querySelector(`[data-type="xray"][data-position="${position}"]`);
                        if (thumbnail) {
                            handleImageUpload(file, thumbnail);
                        }
                    }
                });
            };
            
            input.click();
        }

        // 表示モード切り替え
        function setViewMode(mode) {
            currentViewMode = mode;
            document.querySelectorAll('.view-mode-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            if (mode === 'single') {
                document.getElementById('single-view').style.display = 'block';
                document.getElementById('split-view').style.display = 'none';
            } else {
                document.getElementById('single-view').style.display = 'none';
                document.getElementById('split-view').style.display = 'grid';
                updateSplitView();
            }
        }

        // 分割表示の更新
        function updateSplitView() {
            const intraoralContainer = document.getElementById('split-intraoral');
            const xrayContainer = document.getElementById('split-xray');
            
            intraoralContainer.innerHTML = '';
            const intraoralThumbnails = document.querySelectorAll('#intraoral-thumbnails .thumbnail');
            intraoralThumbnails.forEach(thumb => {
                if (thumb.classList.contains('has-image')) {
                    const clone = thumb.cloneNode(true);
                    setupImageControls(clone);
                    intraoralContainer.appendChild(clone);
                }
            });
            
            xrayContainer.innerHTML = '';
            const xrayThumbnails = document.querySelectorAll('#xray-thumbnails .thumbnail, .dental-10 .thumbnail');
            xrayThumbnails.forEach(thumb => {
                if (thumb.classList.contains('has-image')) {
                    const clone = thumb.cloneNode(true);
                    setupImageControls(clone);
                    xrayContainer.appendChild(clone);
                }
            });
        }

        // 画像コントロールのイベントリスナー設定
        function setupImageControls(thumbnail) {
            const controls = thumbnail.querySelector('.image-controls');
            if (controls) {
                const buttons = controls.querySelectorAll('.image-control-btn');
                buttons.forEach(btn => {
                    if (btn.classList.contains('delete')) {
                        btn.onclick = (e) => deleteImage(e, btn);
                    } else if (btn.title === '上下反転') {
                        btn.onclick = (e) => flipImageVertical(e, btn);
                    } else if (btn.title === '左右反転') {
                        btn.onclick = (e) => flipImageHorizontal(e, btn);
                    } else if (btn.title === '90度回転') {
                        btn.onclick = (e) => rotateImage(e, btn);
                    }
                });
            }
            
            thumbnail.addEventListener('click', handleThumbnailClick);
            
            thumbnail.addEventListener('dragstart', handleImageDragStart);
            thumbnail.addEventListener('dragend', handleImageDragEnd);
            thumbnail.addEventListener('dragover', handleImageDragOver);
            thumbnail.addEventListener('drop', handleImageDrop);
            thumbnail.addEventListener('dragleave', handleImageDragLeave);
        }

        // 画像変形関数
        function getImageTransformKey(thumbnail) {
            const type = thumbnail.dataset.type;
            const position = thumbnail.dataset.position;
            return `${type}-${position}`;
        }

        function applyImageTransform(img, transformKey) {
            if (!imageTransforms[transformKey]) {
                imageTransforms[transformKey] = {
                    flipH: false,
                    flipV: false,
                    rotation: 0
                };
            }
            
            const transform = imageTransforms[transformKey];
            let transformStr = '';
            
            if (transform.flipH) transformStr += 'scaleX(-1) ';
            if (transform.flipV) transformStr += 'scaleY(-1) ';
            if (transform.rotation) transformStr += `rotate(${transform.rotation}deg) ';
            
            img.style.transform = transformStr;
        }

        // 上下反転
        function flipImageVertical(event, button) {
            event.stopPropagation();
            const thumbnail = button.closest('.thumbnail');
            const img = thumbnail.querySelector('img');
            if (!img) return;
            
            const key = getImageTransformKey(thumbnail);
            if (!imageTransforms[key]) {
                imageTransforms[key] = { flipH: false, flipV: false, rotation: 0 };
            }
            
            imageTransforms[key].flipV = !imageTransforms[key].flipV;
            applyImageTransform(img, key);
            
            if (currentViewMode === 'split') {
                updateSplitView();
            }
        }

        // 左右反転
        function flipImageHorizontal(event, button) {
            event.stopPropagation();
            const thumbnail = button.closest('.thumbnail');
            const img = thumbnail.querySelector('img');
            if (!img) return;
            
            const key = getImageTransformKey(thumbnail);
            if (!imageTransforms[key]) {
                imageTransforms[key] = { flipH: false, flipV: false, rotation: 0 };
            }
            
            imageTransforms[key].flipH = !imageTransforms[key].flipH;
            applyImageTransform(img, key);
            
            if (currentViewMode === 'split') {
                updateSplitView();
            }
        }

        // 90度回転
        function rotateImage(event, button) {
            event.stopPropagation();
            const thumbnail = button.closest('.thumbnail');
            const img = thumbnail.querySelector('img');
            if (!img) return;
            
            const key = getImageTransformKey(thumbnail);
            if (!imageTransforms[key]) {
                imageTransforms[key] = { flipH: false, flipV: false, rotation: 0 };
            }
            
            imageTransforms[key].rotation = (imageTransforms[key].rotation + 90) % 360;
            applyImageTransform(img, key);
            
            if (currentViewMode === 'split') {
                updateSplitView();
            }
        }

        // 分割画面の初期化
        function initializeSplitPane() {
            const divider = document.querySelector('.split-divider');
            const leftPanel = document.querySelector('.left-panel');
            const container = document.querySelector('.main-container');
            let isDragging = false;

            divider.addEventListener('mousedown', (e) => {
                isDragging = true;
                document.body.style.cursor = 'col-resize';
                document.body.style.userSelect = 'none';
            });

            document.addEventListener('mousemove', (e) => {
                if (!isDragging) return;
                
                const containerRect = container.getBoundingClientRect();
                const newWidth = e.clientX - containerRect.left;
                const percentage = (newWidth / containerRect.width) * 100;
                
                if (percentage > 20 && percentage < 80) {
                    leftPanel.style.width = percentage + '%';
                }
            });

            document.addEventListener('mouseup', () => {
                isDragging = false;
                document.body.style.cursor = 'default';
                document.body.style.userSelect = 'auto';
            });
        }

        // ドラッグ&ドロップの初期化
        function initializeDragAndDrop() {
            const thumbnails = document.querySelectorAll('.thumbnail');
            
            thumbnails.forEach(thumbnail => {
                thumbnail.addEventListener('dragover', handleDragOver);
                thumbnail.addEventListener('drop', handleDrop);
                thumbnail.addEventListener('dragleave', handleDragLeave);
                thumbnail.addEventListener('click', handleThumbnailClick);
            });

            document.addEventListener('dragover', (e) => e.preventDefault());
            document.addEventListener('drop', (e) => e.preventDefault());
        }

        // 喫煙選択の初期化
        function initializeSmokingToggle() {
            ['ideal', 'standard', 'insurance'].forEach(plan => {
                const smokingRadios = document.querySelectorAll(`input[name="smoking-${plan}"]`);
                const smokingAmount = document.getElementById(`smokingAmount-${plan}`);
                
                smokingRadios.forEach(radio => {
                    radio.addEventListener('change', function() {
                        if (this.value === '有') {
                            smokingAmount.style.display = 'inline-block';
                        } else {
                            smokingAmount.style.display = 'none';
                            smokingAmount.value = '';
                        }
                    });
                });
            });
        }

        // ドラッグオーバー処理
        function handleDragOver(e) {
            e.preventDefault();
            
            if (!draggedThumbnail) {
                this.classList.add('drag-over');
            }
        }

        // ドラッグリーブ処理
        function handleDragLeave(e) {
            this.classList.remove('drag-over');
        }

        // ドロップ処理
        function handleDrop(e) {
            e.preventDefault();
            this.classList.remove('drag-over');
            
            if (draggedThumbnail) {
                return;
            }
            
            const files = e.dataTransfer.files;
            if (files.length > 0 && files[0].type.startsWith('image/')) {
                handleImageUpload(files[0], this);
            }
        }

        // サムネイルクリック処理
        function handleThumbnailClick(e) {
            if (e.target.classList.contains('image-control-btn')) {
                return;
            }
            
            if (!this.classList.contains('has-image')) {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = 'image/*';
                
                input.onchange = (event) => {
                    if (event.target.files.length > 0) {
                        handleImageUpload(event.target.files[0], this);
                    }
                };
                
                input.click();
            } else {
                const img = this.querySelector('img');
                if (img) {
                    showLargeImage(img.src, getImageTransformKey(this));
                }
            }
        }

        // 画像アップロード処理
        function handleImageUpload(file, thumbnail) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                const imageData = e.target.result;
                
                const existingImg = thumbnail.querySelector('img');
                if (existingImg) {
                    existingImg.remove();
                }
                
                const img = document.createElement('img');
                img.src = imageData;
                img.draggable = false;
                thumbnail.appendChild(img);
                thumbnail.classList.add('has-image');
                thumbnail.draggable = true;
                
                const key = getImageTransformKey(thumbnail);
                if (imageTransforms[key]) {
                    applyImageTransform(img, key);
                }
                
                const type = thumbnail.dataset.type;
                const position = thumbnail.dataset.position;
                if (!uploadedImages[type]) {
                    uploadedImages[type] = {};
                }
                uploadedImages[type][position] = imageData;
                
                showLargeImage(imageData, key);
                
                if (currentViewMode === 'split') {
                    updateSplitView();
                }
                
                initializeImageDragAndDrop();
            };
            
            reader.readAsDataURL(file);
        }

        // 画像削除
        function deleteImage(event, button) {
            event.stopPropagation();
            const thumbnail = button.closest('.thumbnail');
            const img = thumbnail.querySelector('img');
            
            if (img) {
                img.remove();
                thumbnail.classList.remove('has-image');
                thumbnail.draggable = false;
                
                const type = thumbnail.dataset.type;
                const position = thumbnail.dataset.position;
                if (uploadedImages[type] && uploadedImages[type][position]) {
                    delete uploadedImages[type][position];
                }
                
                const key = getImageTransformKey(thumbnail);
                delete imageTransforms[key];
                
                const largeImageContainer = document.getElementById('largeImageContainer');
                if (largeImageContainer.querySelector('img')?.src === img.src) {
                    largeImageContainer.innerHTML = '<p style="color: #999;">画像を選択してください</p>';
                }
                
                if (currentViewMode === 'split') {
                    updateSplitView();
                }
            }
        }

        // 大きい画像表示
        function showLargeImage(imageSrc, transformKey) {
            const container = document.getElementById('largeImageContainer');
            const img = document.createElement('img');
            img.className = 'large-image';
            img.src = imageSrc;
            
            if (transformKey && imageTransforms[transformKey]) {
                applyImageTransform(img, transformKey);
            }
            
            container.innerHTML = '';
            container.appendChild(img);
        }

        // 医管ボタンのトグル
        function toggleMedicalBtn(type, plan) {
            const btn = document.getElementById(`btn-${type}-${plan}`);
            btn.classList.toggle('selected');
            
            if (btn.classList.contains('selected')) {
                if (!medicalManagement[plan].includes(type === 'soui' ? '総医' : '医管')) {
                    medicalManagement[plan].push(type === 'soui' ? '総医' : '医管');
                }
            } else {
                const index = medicalManagement[plan].indexOf(type === 'soui' ? '総医' : '医管');
                if (index > -1) {
                    medicalManagement[plan].splice(index, 1);
                }
            }
        }

        // 選択オプション
        function selectOption(field, value, plan) {
            document.querySelectorAll(`#plan-${plan} [data-field="${field}"]`).forEach(btn => {
                btn.classList.remove('selected');
            });
            
            event.target.classList.add('selected');
            remarksData[plan][field] = value;
        }

        // 歯式選択
        function selectField(fieldName, plan) {
            if (activeField) {
                document.getElementById(`field-${activeField}-${plan}`).classList.remove('active');
            }
            
            activeField = fieldName;
            document.getElementById(`field-${fieldName}-${plan}`).classList.add('active');
            
            if (fieldName === 'customRow7') {
                const customName = document.getElementById(`customRow7-${plan}`).value || 'カスタム項目7';
                document.getElementById(`currentSelection-${plan}`).textContent = `現在選択中: ${customName}`;
            } else if (fieldName === 'customRow8') {
                const customName = document.getElementById(`customRow8-${plan}`).value || 'カスタム項目8';
                document.getElementById(`currentSelection-${plan}`).textContent = `現在選択中: ${customName}`;
            } else {
                document.getElementById(`currentSelection-${plan}`).textContent = `現在選択中: ${fieldName}`;
            }
            
            updateToothSelection(plan);
        }

        function selectTooth(position, number, plan) {
            if (!activeField) {
                alert('先に治療項目を選択してください');
                return;
            }
            
            if (!selectedTeeth[plan][activeField]) {
                selectedTeeth[plan][activeField] = [];
            }
            
            const index = selectedTeeth[plan][activeField].findIndex(t => 
                t.position === position && t.number === number
            );
            
            if (index > -1) {
                selectedTeeth[plan][activeField].splice(index, 1);
            } else {
                selectedTeeth[plan][activeField].push({ position, number });
            }
            
            updateToothSelection(plan);
            updateFieldDisplay(activeField, plan);
        }

        function updateToothSelection(plan) {
            document.querySelectorAll(`#plan-${plan} .tooth-btn`).forEach(btn => {
                btn.classList.remove('selected');
            });
            
            if (activeField && selectedTeeth[plan][activeField]) {
                selectedTeeth[plan][activeField].forEach(tooth => {
                    const btn = document.querySelector(`#plan-${plan} [data-position="${tooth.position}"][data-number="${tooth.number}"]`);
                    if (btn) btn.classList.add('selected');
                });
            }
        }

        function updateFieldDisplay(fieldName, plan) {
            const field = document.getElementById(`field-${fieldName}-${plan}`);
            field.innerHTML = '';
            
            if (!selectedTeeth[plan][fieldName] || selectedTeeth[plan][fieldName].length === 0) {
                return;
            }
            
            const grouped = {};
            selectedTeeth[plan][fieldName].forEach(tooth => {
                if (!grouped[tooth.position]) {
                    grouped[tooth.position] = [];
                }
                grouped[tooth.position].push(tooth.number);
            });
            
            const crossDisplay = document.createElement('div');
            crossDisplay.className = 'cross-display';
            
            const quadrantMap = {
                '右上': 'top-left',
                '左上': 'top-right',
                '右下': 'bottom-left',
                '左下': 'bottom-right'
            };
            
            Object.entries(grouped).forEach(([position, numbers]) => {
                const quadrantClass = quadrantMap[position];
                const quadrant = document.createElement('div');
                quadrant.className = `quadrant ${quadrantClass}`;
                
                if (position === '右上' || position === '右下') {
                    numbers.sort((a, b) => b - a);
                } else {
                    numbers.sort((a, b) => a - b);
                }
                
                quadrant.textContent = numbers.join(' ');
                crossDisplay.appendChild(quadrant);
            });
            
            field.appendChild(crossDisplay);
        }

        // 治療順序のドラッグ&ドロップ
        let draggedItem = null;

        function initializeDraggableOrder(item) {
            item.draggable = true;
            
            item.addEventListener('dragstart', function(e) {
                draggedItem = this;
                this.classList.add('dragging');
                e.dataTransfer.effectAllowed = 'move';
            });
            
            item.addEventListener('dragend', function(e) {
                this.classList.remove('dragging');
            });
            
            item.addEventListener('dragover', function(e) {
                e.preventDefault();
                const afterElement = getDragAfterElement(this.parentElement, e.clientY);
                if (afterElement == null) {
                    this.parentElement.appendChild(draggedItem);
                } else {
                    this.parentElement.insertBefore(draggedItem, afterElement);
                }
            });
        }

        function getDragAfterElement(container, y) {
            const draggableElements = [...container.querySelectorAll('.treatment-order-item:not(.dragging)')];
            
            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        // 治療順序の自動生成
        function autoGenerateTreatmentOrder(plan) {
            const orderList = document.getElementById(`treatmentOrderList-${plan}`);
            orderList.innerHTML = '';
            treatmentOrderCounter[plan] = 0;

            const treatments = [];
            for (let treatment in selectedTeeth[plan]) {
                if (selectedTeeth[plan][treatment] && selectedTeeth[plan][treatment].length > 0) {
                    const teeth = selectedTeeth[plan][treatment].map(t => `${t.position}${t.number}`).join(', ');
                    
                    let treatmentName = treatment;
                    if (treatment === 'customRow7') {
                        treatmentName = document.getElementById(`customRow7-${plan}`).value || 'カスタム項目7';
                    } else if (treatment === 'customRow8') {
                        treatmentName = document.getElementById(`customRow8-${plan}`).value || 'カスタム項目8';
                    }
                    
                    treatments.push({
                        treatment: treatmentName,
                        teeth: teeth,
                        priority: treatmentPriority[treatment] || 99
                    });
                }
            }

            treatments.sort((a, b) => a.priority - b.priority);

            treatments.forEach(item => {
                addTreatmentOrder(plan, item.treatment, item.teeth);
            });

            if (treatments.length === 0) {
                alert('治療計画が入力されていません。先に治療項目と歯式を選択してください。');
                addTreatmentOrder(plan);
            }

            updateOrderNumbers(plan);
        }

        // 治療順序の追加
        function addTreatmentOrder(plan, presetTreatment = '', presetTeeth = '') {
            treatmentOrderCounter[plan]++;
            const orderList = document.getElementById(`treatmentOrderList-${plan}`);
            
            const orderItem = document.createElement('div');
            orderItem.className = 'treatment-order-item';
            orderItem.id = `order-${plan}-${treatmentOrderCounter[plan]}`;
            
            let optionsHtml = '<option value="">選択してください</option>';
            treatmentOptions.forEach(option => {
                const selected = option === presetTreatment ? 'selected' : '';
                optionsHtml += `<option value="${option}" ${selected}>${option}</option>`;
            });
            
            const customRow7Name = document.getElementById(`customRow7-${plan}`)?.value;
            const customRow8Name = document.getElementById(`customRow8-${plan}`)?.value;
            if (customRow7Name) {
                const selected = customRow7Name === presetTreatment ? 'selected' : '';
                optionsHtml += `<option value="${customRow7Name}" ${selected}>${customRow7Name}</option>`;
            }
            if (customRow8Name) {
                const selected = customRow8Name === presetTreatment ? 'selected' : '';
                optionsHtml += `<option value="${customRow8Name}" ${selected}>${customRow8Name}</option>`;
            }
            
            orderItem.innerHTML = `
                <div class="drag-handle">≡</div>
                <div class="order-number">1</div>
                <select class="treatment-select">
                    ${optionsHtml}
                </select>
                <input type="text" class="teeth-input" placeholder="例: 右上6, 左下4-5" value="${presetTeeth}">
                <input type="text" class="notes-input" placeholder="備考">
                <button class="delete-order-btn" onclick="deleteTreatmentOrder('order-${plan}-${treatmentOrderCounter[plan]}', '${plan}')">削除</button>
            `;
            
            orderList.appendChild(orderItem);
            initializeDraggableOrder(orderItem);
            updateOrderNumbers(plan);
        }

        function deleteTreatmentOrder(orderId, plan) {
            const orderItem = document.getElementById(orderId);
            if (orderItem) {
                orderItem.remove();
                updateOrderNumbers(plan);
            }
        }

        function updateOrderNumbers(plan) {
            const orderItems = document.querySelectorAll(`#treatmentOrderList-${plan} .treatment-order-item`);
            orderItems.forEach((item, index) => {
                const numberDiv = item.querySelector('.order-number');
                if (numberDiv) {
                    numberDiv.textContent = index + 1;
                }
            });
        }

        // データ管理
        function clearCurrentField(plan) {
            if (!activeField) {
                alert('クリアする項目を選択してください');
                return;
            }
            
            if (confirm(`${activeField}の選択をクリアしますか？`)) {
                selectedTeeth[plan][activeField] = [];
                updateFieldDisplay(activeField, plan);
                updateToothSelection(plan);
            }
        }

        function clearAll() {
            if (confirm('すべての入力をクリアしますか？')) {
                document.querySelectorAll('input[type="text"], input[type="date"], textarea').forEach(input => {
                    input.value = '';
                });
                
                const today = new Date().toISOString().split('T')[0];
                ['ideal', 'standard', 'insurance'].forEach(plan => {
                    const dateInput = document.getElementById(`planDate-${plan}`);
                    if (dateInput) {
                        dateInput.value = today;
                    }
                });
                
                ['ideal', 'standard', 'insurance'].forEach(plan => {
                    document.querySelector(`input[name="smoking-${plan}"][value="無"]`)?.setAttribute('checked', true);
                    const smokingAmount = document.getElementById(`smokingAmount-${plan}`);
                    if (smokingAmount) {
                        smokingAmount.style.display = 'none';
                    }
                });
                
                document.querySelectorAll('.select-btn').forEach(btn => {
                    btn.classList.remove('selected');
                });
                document.querySelectorAll('.medical-btn').forEach(btn => {
                    btn.classList.remove('selected');
                });
                
                selectedTeeth = {
                    ideal: {},
                    standard: {},
                    insurance: {}
                };
                document.querySelectorAll('.treatment-field').forEach(field => {
                    field.innerHTML = '';
                    field.classList.remove('active');
                });
                document.querySelectorAll('.tooth-btn').forEach(btn => {
                    btn.classList.remove('selected');
                });
                
                uploadedImages = {};
                imageTransforms = {};
                document.querySelectorAll('.thumbnail').forEach(thumbnail => {
                    const img = thumbnail.querySelector('img');
                    if (img) img.remove();
                    thumbnail.classList.remove('has-image');
                    thumbnail.draggable = false;
                });
                document.getElementById('largeImageContainer').innerHTML = '<p style="color: #999;">画像を選択してください</p>';
                
                ['ideal', 'standard', 'insurance'].forEach(plan => {
                    const orderList = document.getElementById(`treatmentOrderList-${plan}`);
                    if (orderList) {
                        orderList.innerHTML = '';
                    }
                    treatmentOrderCounter[plan] = 0;
                    addTreatmentOrder(plan);
                });
                
                activeField = null;
                medicalManagement = {
                    ideal: [],
                    standard: [],
                    insurance: []
                };
                remarksData = {
                    ideal: {},
                    standard: {},
                    insurance: {}
                };
                customFields = {
                    ideal: {},
                    standard: {},
                    insurance: {}
                };
                planningGuideData = {
                    patientBackground: {},
                    extractionTeeth: [],
                    prognosisTeeth: [],
                    occlusionIssues: {},
                    occlusionClass: '',
                    insurancePlan: {},
                    orthodontics: {},
                    implantPlan: {},
                    futureRisk: {},
                    selfPayOptions: {},
                    longTermPrognosis: {},
                    patientCommunication: {}
                };
                
                ['ideal', 'standard', 'insurance'].forEach(plan => {
                    const selection = document.getElementById(`currentSelection-${plan}`);
                    if (selection) {
                        selection.textContent = '治療項目を選択してください';
                    }
                });
                
                document.querySelectorAll('textarea').forEach(textarea => {
                    textarea.style.height = 'auto';
                });
                
                updateProgress();
            }
        }

        // データ収集
        function collectRemarksData(plan) {
            const smokingRadio = document.querySelector(`input[name="smoking-${plan}"]:checked`);
            const remarks = {
                smoking: smokingRadio ? smokingRadio.value : '無',
                smokingAmount: document.getElementById(`smokingAmount-${plan}`)?.value || '',
                occlusion: document.getElementById(`occlusion-${plan}`)?.value || '',
                brx: remarksData[plan].brx || '',
                ng: remarksData[plan].ng || '',
                ngText: document.getElementById(`ngText-${plan}`)?.value || '',
                p: remarksData[plan].p || '',
                c: remarksData[plan].c || '',
                ortho: remarksData[plan].ortho || '',
                clearTools: document.getElementById(`clearTools-${plan}`)?.value || '',
                ohiPolicy: document.getElementById(`ohiPolicy-${plan}`)?.value || '',
                notes: document.getElementById(`remarksNotes-${plan}`)?.value || ''
            };
            return remarks;
        }

        // データ保存
        function saveData() {
            const patientInfo = {
                name: document.getElementById('patientName').value,
                id: document.getElementById('patientId').value
            };
            
            if (!patientInfo.name || !patientInfo.id) {
                alert('患者名とIDを入力してください');
                return;
            }
            
            const plans = {};
            ['ideal', 'standard', 'insurance'].forEach(plan => {
                const chiefComplaint = document.getElementById(`chiefComplaint-${plan}`)?.value || '';
                const medicalHistory = document.getElementById(`medicalHistory-${plan}`)?.value || '';
                const medications = document.getElementById(`medications-${plan}`)?.value || '';
                const precautions = document.getElementById(`precautions-${plan}`)?.value || '';
                
                const treatmentPlan = {
                    date: document.getElementById(`planDate-${plan}`)?.value || '',
                    doctorName: document.getElementById(`planDoctorName-${plan}`)?.value || '',
                    dhName: document.getElementById(`planDhName-${plan}`)?.value || '',
                    medicalManagement: medicalManagement[plan] || []
                };
                
                const treatmentOrder = [];
                document.querySelectorAll(`#treatmentOrderList-${plan} .treatment-order-item`).forEach(item => {
                    const treatment = item.querySelector('.treatment-select').value;
                    const teeth = item.querySelector('.teeth-input').value;
                    const notes = item.querySelector('.notes-input').value;
                    
                    if (treatment) {
                        treatmentOrder.push({ treatment, teeth, notes });
                    }
                });
                
                plans[plan] = {
                    patientInfo: {
                        chiefComplaint,
                        medicalHistory,
                        medications,
                        precautions
                    },
                    treatmentPlan,
                    treatments: selectedTeeth[plan] || {},
                    freeText: document.getElementById(`freeText-${plan}`)?.value || '',
                    treatmentOrder,
                    remarks: collectRemarksData(plan),
                    customFields: customFields[plan] || {}
                };
            });
            
            const data = {
                patientInfo,
                patientName: patientInfo.name,
                patientId: patientInfo.id,
                plans,
                images: uploadedImages,
                imageTransforms: imageTransforms,
                planningGuide: planningGuideData,
                activePlan,
                date: new Date().toLocaleDateString('ja-JP')
            };
            
            document.getElementById('loading').style.display = 'flex';
            
            google.script.run
                .withSuccessHandler(function(result) {
                    document.getElementById('loading').style.display = 'none';
                    if (result.success) {
                        alert(result.message);
                    } else {
                        alert('保存に失敗しました: ' + result.error);
                    }
                })
                .withFailureHandler(function(error) {
                    document.getElementById('loading').style.display = 'none';
                    alert('エラーが発生しました: ' + error);
                })
                .saveToTempFolder(data);
        }

        // データ読み込みモーダル表示
        function showLoadModal() {
            document.getElementById('loadModal').style.display = 'block';
            loadFileList();
        }

        function closeLoadModal() {
            document.getElementById('loadModal').style.display = 'none';
        }

        // ファイルリスト読み込み
        function loadFileList() {
            document.getElementById('loading').style.display = 'flex';
            
            google.script.run
                .withSuccessHandler(function(fileList) {
                    document.getElementById('loading').style.display = 'none';
                    const container = document.getElementById('fileList');
                    
                    if (fileList.length === 0) {
                        container.innerHTML = '<p style="text-align: center; color: #999;">保存済みデータはありません</p>';
                        return;
                    }
                    
                    let html = '';
                    fileList.forEach(file => {
                        const date = new Date(file.timestamp.replace(/-/g, ':')).toLocaleString('ja-JP');
                        html += `
                            <div class="file-item">
                                <div class="file-item-info">
                                    <strong>${file.patientName}</strong> (ID: ${file.patientId})<br>
                                    <small>保存日時: ${date}</small>
                                </div>
                                <div class="file-item-actions">
                                    <button class="btn btn-primary" onclick="loadData('${file.id}')">読み込み</button>
                                    <button class="btn btn-danger" onclick="deleteFile('${file.id}')">削除</button>
                                </div>
                            </div>
                        `;
                    });
                    
                    container.innerHTML = html;
                })
                .withFailureHandler(function(error) {
                    document.getElementById('loading').style.display = 'none';
                    alert('ファイルリスト取得エラー: ' + error);
                })
                .getTempFileList();
        }

        // データ読み込み
        function loadData(fileId) {
            document.getElementById('loading').style.display = 'flex';
            
            google.script.run
                .withSuccessHandler(function(result) {
                    document.getElementById('loading').style.display = 'none';
                    if (result.success) {
                        const data = result.data;
                        
                        // 患者基本情報を復元
                        if (data.patientInfo) {
                            document.getElementById('patientName').value = data.patientInfo.name || '';
                            document.getElementById('patientId').value = data.patientInfo.id || '';
                        }
                        
                        // 各プランのデータを復元
                        if (data.plans) {
                            Object.keys(data.plans).forEach(plan => {
                                const planData = data.plans[plan];
                                
                                // 患者情報
                                if (planData.patientInfo) {
                                    document.getElementById(`chiefComplaint-${plan}`).value = planData.patientInfo.chiefComplaint || '';
                                    document.getElementById(`medicalHistory-${plan}`).value = planData.patientInfo.medicalHistory || '';
                                    document.getElementById(`medications-${plan}`).value = planData.patientInfo.medications || '';
                                    document.getElementById(`precautions-${plan}`).value = planData.patientInfo.precautions || '';
                                }
                                
                                // 治療計画ヘッダー
                                if (planData.treatmentPlan) {
                                    document.getElementById(`planDate-${plan}`).value = planData.treatmentPlan.date || '';
                                    document.getElementById(`planDoctorName-${plan}`).value = planData.treatmentPlan.doctorName || '';
                                    document.getElementById(`planDhName-${plan}`).value = planData.treatmentPlan.dhName || '';
                                    
                                    medicalManagement[plan] = planData.treatmentPlan.medicalManagement || [];
                                    document.querySelectorAll(`#plan-${plan} .medical-btn`).forEach(btn => {
                                        btn.classList.remove('selected');
                                    });
                                    medicalManagement[plan].forEach(item => {
                                        if (item === '総医') {
                                            document.getElementById(`btn-soui-${plan}`)?.classList.add('selected');
                                        } else if (item === '医管') {
                                            document.getElementById(`btn-ikan-${plan}`)?.classList.add('selected');
                                        }
                                    });
                                }
                                
                                // カスタムフィールド
                                if (planData.customFields) {
                                    customFields[plan] = planData.customFields;
                                    if (planData.customFields.row7Right) {
                                        const input = document.getElementById(`customRow7-${plan}`);
                                        if (input) input.value = planData.customFields.row7Right;
                                    }
                                    if (planData.customFields.row8Right) {
                                        const input = document.getElementById(`customRow8-${plan}`);
                                        if (input) input.value = planData.customFields.row8Right;
                                    }
                                }
                                
                                // 備考欄
                                if (planData.remarks) {
                                    if (planData.remarks.smoking) {
                                        const radio = document.querySelector(`input[name="smoking-${plan}"][value="${planData.remarks.smoking}"]`);
                                        if (radio) radio.checked = true;
                                        if (planData.remarks.smoking === '有' && planData.remarks.smokingAmount) {
                                            const amountInput = document.getElementById(`smokingAmount-${plan}`);
                                            if (amountInput) {
                                                amountInput.style.display = 'inline-block';
                                                amountInput.value = planData.remarks.smokingAmount;
                                            }
                                        }
                                    }
                                    
                                    const fields = ['occlusion', 'ngText', 'clearTools', 'ohiPolicy', 'notes'];
                                    fields.forEach(field => {
                                        const input = document.getElementById(`${field === 'notes' ? 'remarksNotes' : field}-${plan}`);
                                        if (input && planData.remarks[field]) {
                                            input.value = planData.remarks[field];
                                        }
                                    });
                                    
                                    remarksData[plan] = {};
                                    ['brx', 'ng', 'p', 'c', 'ortho'].forEach(field => {
                                        if (planData.remarks[field]) {
                                            remarksData[plan][field] = planData.remarks[field];
                                            const btn = document.querySelector(`#plan-${plan} [data-field="${field}"][data-value="${planData.remarks[field]}"]`);
                                            if (btn) btn.classList.add('selected');
                                        }
                                    });
                                }
                                
                                // 治療データ
                                selectedTeeth[plan] = planData.treatments || {};
                                const freeText = document.getElementById(`freeText-${plan}`);
                                if (freeText) freeText.value = planData.freeText || '';
                                
                                // 治療順序
                                if (planData.treatmentOrder && planData.treatmentOrder.length > 0) {
                                    const orderList = document.getElementById(`treatmentOrderList-${plan}`);
                                    if (orderList) {
                                        orderList.innerHTML = '';
                                        treatmentOrderCounter[plan] = 0;
                                        
                                        planData.treatmentOrder.forEach(order => {
                                            addTreatmentOrder(plan, order.treatment, order.teeth);
                                            const lastItem = orderList.querySelector('.treatment-order-item:last-child');
                                            if (lastItem && order.notes) {
                                                lastItem.querySelector('.notes-input').value = order.notes;
                                            }
                                        });
                                    }
                                }
                                
                                // 表示を更新
                                Object.keys(selectedTeeth[plan]).forEach(fieldName => {
                                    updateFieldDisplay(fieldName, plan);
                                });
                            });
                        }
                        
                        // 画像を復元
                        if (data.images) {
                            uploadedImages = data.images;
                            imageTransforms = data.imageTransforms || {};
                            
                            for (let type in data.images) {
                                for (let position in data.images[type]) {
                                    const thumbnail = document.querySelector(`[data-type="${type}"][data-position="${position}"]`);
                                    if (thumbnail) {
                                        const img = document.createElement('img');
                                        img.src = data.images[type][position];
                                        img.draggable = false;
                                        thumbnail.appendChild(img);
                                        thumbnail.classList.add('has-image');
                                        thumbnail.draggable = true;
                                        
                                        const key = `${type}-${position}`;
                                        if (imageTransforms[key]) {
                                            applyImageTransform(img, key);
                                        }
                                    }
                                }
                            }
                            
                            initializeImageDragAndDrop();
                        }
                        
                        // 立案ガイドデータを復元
                        if (data.planningGuide) {
                            planningGuideData = data.planningGuide;
                            // ガイドの表示を更新（実装省略）
                        }
                        
                        // アクティブプランを復元
                        if (data.activePlan) {
                            activePlan = data.activePlan;
                            switchPlanTab(activePlan);
                        }
                        
                        // テキストエリアの高さを調整
                        document.querySelectorAll('textarea').forEach(textarea => {
                            textarea.style.height = 'auto';
                            textarea.style.height = (textarea.scrollHeight) + 'px';
                        });
                        
                        closeLoadModal();
                        alert('データを読み込みました');
                    } else {
                        alert('読み込みに失敗しました: ' + result.error);
                    }
                })
                .withFailureHandler(function(error) {
                    document.getElementById('loading').style.display = 'none';
                    alert('エラーが発生しました: ' + error);
                })
                .loadTempFile(fileId);
        }

        // ファイル削除
        function deleteFile(fileId) {
            if (confirm('このデータを削除しますか？')) {
                document.getElementById('loading').style.display = 'flex';
                
                google.script.run
                    .withSuccessHandler(function(result) {
                        document.getElementById('loading').style.display = 'none';
                        if (result.success) {
                            alert(result.message);
                            loadFileList();
                        } else {
                            alert('削除に失敗しました: ' + result.error);
                        }
                    })
                    .withFailureHandler(function(error) {
                        document.getElementById('loading').style.display = 'none';
                        alert('エラーが発生しました: ' + error);
                    })
                    .deleteTempFile(fileId);
            }
        }

        // PDF生成
        function generatePDF() {
            const patientInfo = {
                name: document.getElementById('patientName').value,
                id: document.getElementById('patientId').value
            };
            
            if (!patientInfo.name) {
                alert('患者名を入力してください');
                return;
            }
            
            // 現在のプランのデータを取得
            const planData = collectPlanData(activePlan);
            
            const data = {
                patientInfo: {
                    ...patientInfo,
                    ...planData.patientInfo
                },
                treatmentPlan: planData.treatmentPlan,
                treatments: planData.treatments,
                treatmentOrder: planData.treatmentOrder,
                freeText: planData.freeText,
                remarks: planData.remarks,
                customFields: planData.customFields,
                selectedPlan: getPlanDisplayName(activePlan),
                planningGuide: planningGuideData,
                date: new Date().toLocaleDateString('ja-JP')
            };
            
            document.getElementById('loading').style.display = 'flex';
            
            google.script.run
                .withSuccessHandler(function(result) {
                    document.getElementById('loading').style.display = 'none';
                    if (result.success) {
                        if (confirm('PDFが生成されました。ダウンロードしますか？')) {
                            window.open(result.url, '_blank');
                        }
                    } else {
                        alert('PDF生成に失敗しました: ' + result.error);
                    }
                })
                .withFailureHandler(function(error) {
                    document.getElementById('loading').style.display = 'none';
                    alert('エラーが発生しました: ' + error);
                })
                .generatePDF(data);
        }

        // プランデータの収集
        function collectPlanData(plan) {
            const patientInfo = {
                chiefComplaint: document.getElementById(`chiefComplaint-${plan}`)?.value || '',
                medicalHistory: document.getElementById(`medicalHistory-${plan}`)?.value || '',
                medications: document.getElementById(`medications-${plan}`)?.value || '',
                precautions: document.getElementById(`precautions-${plan}`)?.value || ''
            };
            
            const treatmentPlan = {
                date: document.getElementById(`planDate-${plan}`)?.value || '',
                doctorName: document.getElementById(`planDoctorName-${plan}`)?.value || '',
                dhName: document.getElementById(`planDhName-${plan}`)?.value || '',
                medicalManagement: medicalManagement[plan] || []
            };
            
            const treatmentOrder = [];
            document.querySelectorAll(`#treatmentOrderList-${plan} .treatment-order-item`).forEach(item => {
                const treatment = item.querySelector('.treatment-select').value;
                const teeth = item.querySelector('.teeth-input').value;
                const notes = item.querySelector('.notes-input').value;
                
                if (treatment) {
                    treatmentOrder.push({ treatment, teeth, notes });
                }
            });
            
            return {
                patientInfo,
                treatmentPlan,
                treatments: selectedTeeth[plan] || {},
                freeText: document.getElementById(`freeText-${plan}`)?.value || '',
                treatmentOrder,
                remarks: collectRemarksData(plan),
                customFields: customFields[plan] || {}
            };
        }

        // 治療計画のみのPDF生成
        function generateTreatmentOnlyPDF() {
            const patientInfo = {
                name: document.getElementById('patientName').value,
                id: document.getElementById('patientId').value
            };
            
            if (!patientInfo.name) {
                alert('患者名を入力してください');
                return;
            }
            
            const planData = collectPlanData(activePlan);
            
            const data = {
                patientInfo,
                treatmentPlan: planData.treatmentPlan,
                treatments: planData.treatments,
                freeText: planData.freeText,
                remarks: planData.remarks,
                customFields: planData.customFields,
                selectedPlan: getPlanDisplayName(activePlan),
                date: new Date().toLocaleDateString('ja-JP')
            };
            
            document.getElementById('loading').style.display = 'flex';
            
            google.script.run
                .withSuccessHandler(function(result) {
                    document.getElementById('loading').style.display = 'none';
                    if (result.success) {
                        if (confirm('治療計画PDFが生成されました。ダウンロードしますか？')) {
                            window.open(result.url, '_blank');
                        }
                    } else {
                        alert('PDF生成に失敗しました: ' + result.error);
                    }
                })
                .withFailureHandler(function(error) {
                    document.getElementById('loading').style.display = 'none';
                    alert('エラーが発生しました: ' + error);
                })
                .generateTreatmentOnlyPDF(data);
        }

        // プラン比較PDF生成
        function generateComparisonPDF() {
            const patientInfo = {
                name: document.getElementById('patientName').value,
                id: document.getElementById('patientId').value
            };
            
            if (!patientInfo.name) {
                alert('患者名を入力してください');
                return;
            }
            
            const plans = {};
            ['ideal', 'standard', 'insurance'].forEach(plan => {
                plans[plan] = collectPlanData(plan);
            });
            
            const data = {
                patientInfo,
                plans,
                date: new Date().toLocaleDateString('ja-JP')
            };
            
            document.getElementById('loading').style.display = 'flex';
            
            google.script.run
                .withSuccessHandler(function(result) {
                    document.getElementById('loading').style.display = 'none';
                    if (result.success) {
                        if (confirm('プラン比較PDFが生成されました。ダウンロードしますか？')) {
                            window.open(result.url, '_blank');
                        }
                    } else {
                        alert('PDF生成に失敗しました: ' + result.error);
                    }
                })
                .withFailureHandler(function(error) {
                    document.getElementById('loading').style.display = 'none';
                    alert('エラーが発生しました: ' + error);
                })
                .generateComparisonPDF(data);
        }

        // モーダル外クリックで閉じる
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
            if (event.target.classList.contains('tooth-selection-modal')) {
                event.target.style.display = 'none';
            }
        }

        // タッチデバイス対応
        if ('ontouchstart' in window) {
            document.addEventListener('touchstart', function() {}, {passive: true});
        }

        // ドラッグ選択機能の追加
        let isDraggingTeeth = false;
        let dragStartTooth = null;

        // 歯式選択の拡張機能を初期化
        function initializeAdvancedToothSelection() {
            const toothButtons = document.querySelectorAll('.tooth-btn');
            
            toothButtons.forEach(btn => {
                btn.addEventListener('mousedown', function(e) {
                    if (!activeField) {
                        alert('先に治療項目を選択してください');
                        return;
                    }
                    e.preventDefault();
                    isDraggingTeeth = true;
                    dragStartTooth = this;
                    
                    const position = this.dataset.position;
                    const number = parseInt(this.dataset.number);
                    const plan = this.closest('.plan-content')?.id.replace('plan-', '') || activePlan;
                    toggleToothSelection(position, number, plan);
                });
                
                btn.addEventListener('mouseenter', function() {
                    if (isDraggingTeeth && activeField) {
                        const position = this.dataset.position;
                        const number = parseInt(this.dataset.number);
                        const plan = this.closest('.plan-content')?.id.replace('plan-', '') || activePlan;
                        
                        if (dragStartTooth && dragStartTooth.dataset.position === position) {
                            const startNum = parseInt(dragStartTooth.dataset.number);
                            const endNum = number;
                            const minNum = Math.min(startNum, endNum);
                            const maxNum = Math.max(startNum, endNum);
                            
                            for (let i = minNum; i <= maxNum; i++) {
                                addToothToSelection(position, i, plan);
                            }
                            updateToothSelection(plan);
                            updateFieldDisplay(activeField, plan);
                        }
                    }
                });
                
                btn.addEventListener('dblclick', function(e) {
                    e.preventDefault();
                    if (!activeField) return;
                    
                    const position = this.dataset.position;
                    const number = parseInt(this.dataset.number);
                    const plan = this.closest('.plan-content')?.id.replace('plan-', '') || activePlan;
                    
                    for (let i = Math.max(1, number - 1); i <= Math.min(8, number + 1); i++) {
                        addToothToSelection(position, i, plan);
                    }
                    updateToothSelection(plan);
                    updateFieldDisplay(activeField, plan);
                });
            });
            
            document.addEventListener('mouseup', function() {
                isDraggingTeeth = false;
                dragStartTooth = null;
            });
            
            let lastSelectedTooth = null;
            
            toothButtons.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    if (!activeField) return;
                    
                    const position = this.dataset.position;
                    const number = parseInt(this.dataset.number);
                    const plan = this.closest('.plan-content')?.id.replace('plan-', '') || activePlan;
                    
                    if (e.shiftKey && lastSelectedTooth && lastSelectedTooth.position === position) {
                        e.preventDefault();
                        const startNum = lastSelectedTooth.number;
                        const endNum = number;
                        const minNum = Math.min(startNum, endNum);
                        const maxNum = Math.max(startNum, endNum);
                        
                        for (let i = minNum; i <= maxNum; i++) {
                            addToothToSelection(position, i, plan);
                        }
                        updateToothSelection(plan);
                        updateFieldDisplay(activeField, plan);
                    } else {
                        lastSelectedTooth = { position, number };
                    }
                });
            });
        }

        // 歯を選択に追加（重複チェック付き）
        function addToothToSelection(position, number, plan) {
            if (!selectedTeeth[plan][activeField]) {
                selectedTeeth[plan][activeField] = [];
            }
            
            const exists = selectedTeeth[plan][activeField].some(t => 
                t.position === position && t.number === number
            );
            
            if (!exists) {
                selectedTeeth[plan][activeField].push({ position, number });
            }
        }

        // 歯の選択をトグル
        function toggleToothSelection(position, number, plan) {
            if (!selectedTeeth[plan][activeField]) {
                selectedTeeth[plan][activeField] = [];
            }
            
            const index = selectedTeeth[plan][activeField].findIndex(t => 
                t.position === position && t.number === number
            );
            
            if (index > -1) {
                selectedTeeth[plan][activeField].splice(index, 1);
            } else {
                selectedTeeth[plan][activeField].push({ position, number });
            }
        }
    </script>
</body>
</html>